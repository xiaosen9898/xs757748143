import{_ as s,c as a,a2 as l,o as t}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"响应式布局","description":"","frontmatter":{},"headers":[],"relativePath":"html/htAdv/responsive.md","filePath":"html/htAdv/responsive.md"}'),h={name:"html/htAdv/responsive.md"};function n(e,i,k,p,r,d){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h1><h2 id="了解屏幕" tabindex="-1">了解屏幕 <a class="header-anchor" href="#了解屏幕" aria-label="Permalink to &quot;了解屏幕&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-分辨率" tabindex="-1">1. 分辨率： <a class="header-anchor" href="#_1-分辨率" aria-label="Permalink to &quot;1. 分辨率：&quot;">​</a></h4><blockquote><ol><li>逻辑分辨率：屏幕的宽度和高度；</li><li>物理分辨率：屏幕中存放物理像素点个数，显示图像最小单位</li></ol></blockquote><h4 id="_2-ppi" tabindex="-1">2. PPI： <a class="header-anchor" href="#_2-ppi" aria-label="Permalink to &quot;2. PPI：&quot;">​</a></h4><blockquote><ol><li>像素密度；</li><li>单位英寸内拥有物理像素点的个数</li></ol></blockquote><h4 id="_3-视口" tabindex="-1">3. 视口： <a class="header-anchor" href="#_3-视口" aria-label="Permalink to &quot;3. 视口：&quot;">​</a></h4><blockquote><ol><li>早期 PC 端网页版心，大小 980px；</li><li>视口代码</li></ol></blockquote></div><p> </p><h2 id="响应式布局-1" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局-1" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>概念：使用一套代码，在不同尺寸的屏幕下，让用户有良好的体验效果</p></li><li><p>响应式具有的特点：</p></li></ol><blockquote><ol><li>页面的宽度自动调整；</li><li>尽量少用绝对宽度；</li><li>字体要使用 rem、em 做为单位；</li><li>布局要使用浮动、弹性布局</li></ol></blockquote><ol start="3"><li>@规则：</li></ol><blockquote><ol><li>@chartset：定义编码；</li><li>@import：引入 css 文件（css 模块化）；</li><li>@font-face：自定义字体；</li><li>@keyframes：animation 里的关键帧；</li><li>@media：媒体查询</li></ol></blockquote><ol start="4"><li>底层原理：媒体查询</li></ol><blockquote><ol><li>概念：一种 css 技术，是屏幕适配的底层原理；</li><li>作用：根据屏幕宽度的不同，加载不同的 css 代码；</li><li>语法：</li></ol><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) { }      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当屏幕宽度等于800px时 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) { }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当屏幕宽度小于800px时 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) { }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当屏幕宽度大于800px时 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@media</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> screen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">min-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 当屏幕大于800px又小于1000px时 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote></div>`,6)]))}const E=s(h,[["render",n]]);export{c as __pageData,E as default};
