import{_ as o,c as e,a2 as t,o as i}from"./chunks/framework.D3LXhGAZ.js";const p=JSON.parse('{"title":"HTTP 协议","description":"","frontmatter":{},"headers":[],"relativePath":"ajax/ajax/http.md","filePath":"ajax/ajax/http.md"}'),a={name:"ajax/ajax/http.md"};function c(u,l,r,d,s,q){return i(),e("div",null,l[0]||(l[0]=[t('<h1 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>超文本传输协议，是一种基于TCP/IP的应用层通信协议；</li><li>协议详细规定了 浏览器 和万维网 服务器 之间互相通信的规则</li></ol></div><p> </p><h2 id="端口" tabindex="-1">端口 <a class="header-anchor" href="#端口" aria-label="Permalink to &quot;端口&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>HTTP 协议默认端口是 80；</li><li>HTTPS 协议的默认端口是 443</li></ol></div><p> </p><h2 id="请求报文" tabindex="-1">请求报文 <a class="header-anchor" href="#请求报文" aria-label="Permalink to &quot;请求报文&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>作用：以某种规定的格式将请求相关的数据传递给服务器</li><li>组成：</li></ol><blockquote><h4 id="_1-请求行" tabindex="-1">1. 请求行： <a class="header-anchor" href="#_1-请求行" aria-label="Permalink to &quot;1. 请求行：&quot;">​</a></h4><blockquote><ol><li>请求方式</li><li>请求URL</li><li>请求协议版本</li></ol></blockquote></blockquote><blockquote><h4 id="_2-请求头" tabindex="-1">2. 请求头： <a class="header-anchor" href="#_2-请求头" aria-label="Permalink to &quot;2. 请求头：&quot;">​</a></h4><blockquote><ol><li>格式：头名称:头值</li><li>作用：</li></ol><blockquote><ol><li>记录浏览器的一些信息；</li><li>记录交互行为；</li><li>记录一些跟请求头体相关的信息</li></ol></blockquote></blockquote><blockquote><ol start="3"><li>Content-Type：用于指明发送的数据类型，方便接收方正确解析数据</li></ol><blockquote><ul><li><code>application/json</code>：表示JSON格式的数据；</li><li><code>text/html</code>：表示HTML文档；</li><li><code>text/plain</code>：表示纯文本数据；</li><li><code>application/xml</code>：表示XML数据；</li><li><code>multipart/form-data</code>：用于文件上传的表单数据；</li><li><code>application/x-www-form-urlencoded</code>：表示表单提交的数据（如键值对）</li></ul></blockquote></blockquote></blockquote><blockquote><h4 id="_3-请求体" tabindex="-1">3. 请求体： <a class="header-anchor" href="#_3-请求体" aria-label="Permalink to &quot;3. 请求体：&quot;">​</a></h4><blockquote><ol><li>作用：本次请求传递给服务器的参数</li></ol><blockquote><ul><li>如果get方式的参数是在url拼接的，就没有请求体；</li><li>post的参数在这里传递，需设置请求体</li></ul></blockquote></blockquote><blockquote><ol start="2"><li>不同格式请求体，对应不同的请求头</li></ol><blockquote><ul><li>参数=值&amp;参数=值：&#39;Content-Type&#39;，&#39;application/x-www-form-urlencoded&#39;</li><li>{&quot;id&quot;：1，&quot;name&quot;：&quot;zs&quot;}：&quot;Content-Type&quot;，&quot;application/json&quot;</li><li>new FormData()：&quot;Content-Type&quot;，&quot;multipart/form-data;xxsd随机字符串&quot;</li></ul></blockquote></blockquote></blockquote></div><p> </p><h2 id="响应报文" tabindex="-1">响应报文 <a class="header-anchor" href="#响应报文" aria-label="Permalink to &quot;响应报文&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>作用：以某种规定的格式将内容响应给客户端</li><li>组成：</li></ol><blockquote><h4 id="_1-响应行" tabindex="-1">1. 响应行： <a class="header-anchor" href="#_1-响应行" aria-label="Permalink to &quot;1. 响应行：&quot;">​</a></h4><blockquote><ul><li>http响应状态码</li></ul><blockquote><ul><li><code>200</code>：请求成功</li><li><code>301/304</code>：页面重定向</li><li><code>400</code>：参数有问题</li><li><code>401/403</code>：身份验证失败，权限不够</li><li><code>404</code>：资源未找到</li><li><code>500</code>：服务器异常</li></ul></blockquote></blockquote></blockquote><blockquote><h4 id="_2-响应头" tabindex="-1">2. 响应头： <a class="header-anchor" href="#_2-响应头" aria-label="Permalink to &quot;2. 响应头：&quot;">​</a></h4><blockquote><ol><li>作用：描述这次响应的基本信息</li></ol></blockquote><blockquote><ol start="2"><li>Content-Type：本次响应的内容的类型，浏览器会根据这个值对内容进行解析</li></ol><blockquote><ul><li>响应中文乱码，需要在响应头设置响应格式，告诉浏览器该解析为什么格式<code>response.setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=utf-8&quot;)</code></li></ul></blockquote></blockquote></blockquote><blockquote><h4 id="_3-响应体" tabindex="-1">3. 响应体： <a class="header-anchor" href="#_3-响应体" aria-label="Permalink to &quot;3. 响应体：&quot;">​</a></h4><blockquote><ol><li>作用：本次服务器响应给客户端的具体内容</li><li>业务状态码：后端程序员自定义的，表示这次业务处理的成功与否</li></ol></blockquote></blockquote></div><p> </p><h2 id="获取-http-请求报文" tabindex="-1">获取 HTTP 请求报文 <a class="header-anchor" href="#获取-http-请求报文" aria-label="Permalink to &quot;获取 HTTP 请求报文&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>请求路径：<code>req.url</code></li><li>请求方法：<code>req.method</code></li><li>URL 路径：<code>require(&#39;url&#39;).parse(req.url).pathname</code></li><li>URL 查询字符串：<code>require(&#39;url&#39;).parse(req.url, true).query</code></li><li>请求头：<code>req.headers</code></li><li>请求体：<code>req.on(&#39;data&#39;, function(chunk){})，req.on(&#39;end&#39;, function(){});</code></li></ol></div><p> </p><h2 id="设置-http-响应报文" tabindex="-1">设置 HTTP 响应报文 <a class="header-anchor" href="#设置-http-响应报文" aria-label="Permalink to &quot;设置 HTTP 响应报文&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>设置响应状态码：<code>res.statusCode</code></li><li>设置响应状态描述：<code>res.statusMessage</code></li><li>设置响应头信息：<code>res.setHeader(&#39;头名&#39;, &#39;头值&#39;)</code></li><li>设置响应体：<code>res.end(&#39;xxx&#39;)</code> or <code>res.write(&#39;xxx&#39;)</code> or <code>res.json()</code></li></ol></div><p> </p><h2 id="http的无状态协议" tabindex="-1">HTTP的无状态协议 <a class="header-anchor" href="#http的无状态协议" aria-label="Permalink to &quot;HTTP的无状态协议&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>说明：HTTP协议不会记录用户的操作状态，每一个请求对它来说都是一个单独的请求，前后没有任何的关联的</li><li>会话状态保持方式：</li></ol><blockquote><ol><li>cookie</li><li>session</li><li>token</li></ol><blockquote><ol><li>前端需要将登陆成功之后，后台返回的token进行本地存储</li><li>发起后续请求的时候，要将存储的token以请求头的方式传递给后台（一般通过拦截器统一设置）</li></ol></blockquote></blockquote></div><p> </p><h2 id="get和post" tabindex="-1">GET和POST <a class="header-anchor" href="#get和post" aria-label="Permalink to &quot;GET和POST&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>定义：GET 和 POST 是 HTTP 协议请求的两种方式</li><li>区别：</li></ol><blockquote><ul><li>GET 主要用来获取数据，POST 主要用来提交数据</li><li>GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，POST 带参数请求是将参数放到请求体中</li><li>POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏</li><li>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</li></ul></blockquote></div>',24)]))}const b=o(a,[["render",c]]);export{p as __pageData,b as default};
