import{_ as l,c as e,a2 as d,o}from"./chunks/framework.D3LXhGAZ.js";const h=JSON.parse('{"title":"Web Api 基础","description":"","frontmatter":{},"headers":[],"relativePath":"webApi/webapi/webapiBase.md","filePath":"webApi/webapi/webapiBase.md"}'),a={name:"webApi/webapi/webapiBase.md"};function i(r,t,c,s,b,p){return o(),e("div",null,t[0]||(t[0]=[d('<h1 id="web-api-基础" tabindex="-1">Web Api 基础 <a class="header-anchor" href="#web-api-基础" aria-label="Permalink to &quot;Web Api 基础&quot;">​</a></h1><h2 id="web-api-定义" tabindex="-1">Web Api 定义 <a class="header-anchor" href="#web-api-定义" aria-label="Permalink to &quot;Web Api 定义&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>作用：用 js 去操作 HTML 和浏览器</p></li><li><p>分类：</p></li></ol><blockquote><ol><li>DOM（文档对象模型）：</li></ol><blockquote><ol><li>作用：开发网页内容特效和实现用户交互；</li><li>核心思想：把网页内容当做对象来处理；</li><li>DOM 对象：</li></ol><blockquote><ol><li>每个标签元素是一个 js 对象；</li><li>所有的标签属性都可以在这个对象找到；</li><li>修改这个对象的属性会自动映射到标签上</li></ol></blockquote></blockquote><ol start="2"><li>BOM（浏览器对象模型）</li></ol></blockquote></div><p> </p><h2 id="获取元素" tabindex="-1">获取元素 <a class="header-anchor" href="#获取元素" aria-label="Permalink to &quot;获取元素&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>document.querySelector(&#39;selector&#39;)</td><td>获取到第一个选中选择器的元素（如果获取不到返回 null）</td></tr><tr><td>document.querySelectorAll(&#39;selector&#39;)</td><td>获取到所有选中选择器的元素（存放在一个伪数组里，获取不到返回一个 length 为 0 的伪数组）</td></tr><tr><td>getElementById(&#39;id选择器&#39;)</td><td>获取到第一个选中选择器的元素（如果获取不到返回 null）</td></tr><tr><td>getElementsByClassName(&#39;类选择器&#39;)</td><td>获取到第一个选中选择器的元素（如果获取不到返回 null）</td></tr><tr><td>getElementsByName(&#39;指定名称&#39;)</td><td>获取到第一个选中选择器的元素（如果获取不到返回 null）</td></tr></tbody></table></div><p> </p><h2 id="修改元素内容" tabindex="-1">修改元素内容 <a class="header-anchor" href="#修改元素内容" aria-label="Permalink to &quot;修改元素内容&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>元素.innerText = &#39;&#39;</td><td>对元素的文本进行修改，不会识别标签</td></tr><tr><td>元素.innerHTML = &#39;&#39;</td><td>对元素的文本进行修改，会识别标签</td></tr><tr><td>documennt.write()</td><td>会解析标签，只能将文本内容写在body元素之前</td></tr></tbody></table></div><p> </p><h2 id="操作元素属性" tabindex="-1">操作元素属性 <a class="header-anchor" href="#操作元素属性" aria-label="Permalink to &quot;操作元素属性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>基本语法：<code>元素.属性名 = &#39;值&#39;</code></p><ol><li>操作元素的类：</li></ol><table><thead><tr><th style="min-width:80px;">API</th><th style="min-width:290px;">作用</th><th>说明</th></tr></thead><tbody><tr><td>获取类</td><td>元素.classList</td><td></td></tr><tr><td>追加类</td><td> 1.元素.className += &#39;two&#39; <br> 2.元素.className = &#39;one two&#39; </td><td> 1.会覆盖原来的类 <br> 2.追加类的时候类名之间不要忘记空格 </td></tr><tr><td>添加类</td><td>元素.classList.add(&#39;类名1&#39;,&#39;类名2&#39;,...)</td><td></td></tr><tr><td>移除类</td><td>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</td><td></td></tr><tr><td>切换类</td><td>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</td><td> 如果元素有这个类，那就移除这个类；<br> 如果元素没有这个类，那就添加这个类 </td></tr><tr><td>判断类</td><td>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</td><td> 判断这个元素是否拥有某个类，<br> 如果拥有就返回 true，没有就返回 false </td></tr></tbody></table><p> </p><ol start="2"><li>操作表单元素的值：</li></ol><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>获取</td><td>元素.value</td></tr><tr><td>设置</td><td>元素.value = &#39;新值&#39;</td></tr></tbody></table><p> </p><ol start="3"><li>操作布尔型的属性：</li></ol><table><thead><tr><th>API</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>获取</td><td>元素.布尔型属性名</td><td>如：input.disabled</td></tr><tr><td>设置</td><td>元素.布尔型属性名 = true/false</td><td></td></tr></tbody></table><p> </p><ol start="4"><li>操作元素样式属性：</li></ol><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>获取</td><td>元素.style.样式属性名</td></tr><tr><td>设置</td><td>元素.style.样式属性名 = &#39;值&#39;</td></tr></tbody></table><blockquote><p>注意 1：JS 可以获取内联样式和计算样式，但只能设置内联样式</p><blockquote><ol><li><code>dom.style</code>：获取元素的内联样式，得到样式对象；对象中的所有样式属性均可以被赋值，赋值后即可应用样式到元素的 style 中</li><li><code>getComputedStyle(dom)</code>：获取元素的计算样式，得到一个样式对象；该样式对象中的属性是只读的，无法被重新赋值</li></ol></blockquote></blockquote><blockquote><p>注意 2：</p><blockquote><ol><li>当给样式赋值为空字符串时，相当于删除内联样式；</li><li>当给样式的赋值不合法时，赋值语句无效，不会报错；</li><li>CSS 的短横线命名法，在属性名中表现为驼峰命名法</li></ol></blockquote></blockquote></div><p> </p><h2 id="自定义属性" tabindex="-1">自定义属性 <a class="header-anchor" href="#自定义属性" aria-label="Permalink to &quot;自定义属性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>方式 1：<code>data-属性名</code></li></ol><blockquote><ol><li>作用：</li></ol><blockquote><ol><li>用来设置元素的自定义属性；</li><li>dataset 可以获取当前元素中所有以 data-开头的自定义属性，返回一个对象</li></ol></blockquote><ol start="2"><li>例如：</li></ol><blockquote><ul><li>e.target.dataset.id 获取到当前点击元素的自定义属性 data-id 的属性值</li></ul></blockquote></blockquote><p> </p><ol start="2"><li>方式 2：<code>attribute</code></li></ol><blockquote><ol><li>作用：</li></ol><blockquote><ul><li>用来操作元素自定义属性的（点语法操作自定义属性结果为 undefined）</li></ul></blockquote><ol start="2"><li>使用：</li></ol><blockquote><ol><li>获取属性值：<code>元素.getAttribute(&#39;属性名&#39;)</code></li><li>添加/修改属性：<code>元素.setAttribute(&#39;属性名&#39;, &#39;属性值&#39;)</code></li><li>移除属性：<code>元素.removeAttribute(‘属性名’)</code></li></ol></blockquote></blockquote></div>',15)]))}const n=l(a,[["render",i]]);export{h as __pageData,n as default};
