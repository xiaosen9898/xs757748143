import{_ as a,c as i,a4 as t,o as n}from"./chunks/framework.BvVMNBiX.js";const E=JSON.parse('{"title":"PM2 进程管理","description":"","frontmatter":{},"headers":[],"relativePath":"node/node/pm2.md","filePath":"node/node/pm2.md"}'),l={name:"node/node/pm2.md"};function p(r,s,h,e,k,o){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="pm2-进程管理" tabindex="-1">PM2 进程管理 <a class="header-anchor" href="#pm2-进程管理" aria-label="Permalink to &quot;PM2 进程管理&quot;">​</a></h1><h2 id="pm2的意义" tabindex="-1">PM2的意义 <a class="header-anchor" href="#pm2的意义" aria-label="Permalink to &quot;PM2的意义&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>PM2 是一个功能强大的 Node.js 进程管理工具，适合在生产环境中运行应用程序</li></ul></div><p> </p><h2 id="安装-pm2" tabindex="-1">安装 PM2 <a class="header-anchor" href="#安装-pm2" aria-label="Permalink to &quot;安装 PM2&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>有网络环境安装；</p></li><li><p><a href="https://mp.csdn.net/mp_blog/creation/editor/140501920" target="_blank" rel="noreferrer">linux离线安装 PM2</a></p></li></ol></div><p> </p><h2 id="常用指令" tabindex="-1">常用指令 <a class="header-anchor" href="#常用指令" aria-label="Permalink to &quot;常用指令&quot;">​</a></h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><th colspan="2">1. 启动应用程序</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js</td><td>运行单个 Node.js 应用程序；<br> app.js 是你的 Node.js 程序文件 </td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js --name my-app</td><td>自定义应用名称</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js -i 4</td><td>启动指定数量的实例（负载均衡）；<br> -i 4 启动 4 个实例；使用 -i max 启动与 CPU 核心数相同的实例 </td></tr><tr><th colspan="2">2. 查看进程状态</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 list</td><td>查看当前运行的进程</td></tr><tr><th colspan="2">3. 停止/重启/删除应用</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 stop my-app</td><td>停止 my-app 应用程序的进程</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 stop all</td><td>停止所有程序的进程</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 restart my-app</td><td>重启 my-app 应用程序</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 delete my-app</td><td>删除 my-app 应用程序</td></tr><tr><th colspan="2">4. 日志管理</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 logs</td><td>查看应用程序日志</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 logs my-app</td><td>查看特定应用日志</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 flush</td><td>清除所有日志</td></tr><tr><th colspan="2">5. 监控应用</th></tr><tr><td>pm2 monit</td><td>实时监控应用的日志和性能</td></tr><tr><th colspan="2">6. 持久化（保存进程列表）</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 save</td><td>保存当前进程列表，确保服务器重启后自动恢复</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 resurrect</td><td>加载保存的进程列表</td></tr><tr><th colspan="2">7. 启动脚本生成（为系统自动化启动生成配置）</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 startup</td><td>运行此命令后，它会输出一段需要执行的命令，用于配置系统服务</td></tr><tr><th colspan="2">8. 负载均衡模式</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js --name my-app --watch</td><td>Fork 模式：默认模式，每个应用运行在独立的进程中；<br> --watch 用于监控文件变化并自动重启 </td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js -i 0</td><td>Cluster 模式：使用 Node.js 的集群功能运行多个进程；<br> -i 0 会根据 CPU 核心数启动相应数量的实例 </td></tr><tr><th colspan="2">9. 环境变量</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 start app.js --name my-app --env production</td><td>设置环境变量启动应用，或通过 .env 文件加载环境变量</td></tr><tr><th colspan="2">10. 杀死 PM2 所有进程</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 kill</td><td>停止并清除所有进程</td></tr><tr><th colspan="2">11. 导出与导入进程列表</th></tr><tr style="background-color:var(--highlight-color);"><td>pm2 save</td><td>将当前进程保存到文件</td></tr><tr style="background-color:var(--highlight-color);"><td>pm2 resurrect</td><td>从保存的配置中恢复进程</td></tr></tbody></table><p> </p><h2 id="配置文件启动" tabindex="-1">配置文件启动 <a class="header-anchor" href="#配置文件启动" aria-label="Permalink to &quot;配置文件启动&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>定义：PM2 支持使用配置文件管理应用</p></li><li><p>使用步骤</p></li></ol><blockquote><ol><li><p>根目录下创建一个 JSON 配置文件 ecosystem.config.js</p></li><li><p>启动应用：<code>pm2 start ecosystem.config.js</code></p></li></ol><ul><li>配置文件：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  apps: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      script: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动脚本路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      instances: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实例数量：可以是数字或 &quot;max&quot;（根据 CPU 核心数启动）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      exec_mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cluster&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动模式：&quot;fork&quot; 或 &quot;cluster&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      watch: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否监听文件变化自动重启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      max_memory_restart: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;500M&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 内存占用超出限制时重启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      env: {                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NODE_ENV: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;development&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      env_production: {             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生产环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        NODE_ENV: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        PORT: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      log_date_format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;YYYY-MM-DD HH:mm Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 日志时间格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      error_file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./logs/error.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误日志文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      out_file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./logs/output.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通日志文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      merge_logs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合并日志（多实例时）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  deploy: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    production: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      user: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 远程服务器用户名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      host: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 远程服务器地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ref: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;origin/main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Git 仓库分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      repo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git@github.com:repo.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Git 仓库地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/var/www/my-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 部署路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;pre-deploy-local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo &#39;准备部署&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本地预部署命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;post-deploy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 部署后执行的命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></blockquote></div>`,12)]))}const c=a(l,[["render",p]]);export{E as __pageData,c as default};
