import{_ as i,c as a,a2 as t,o as l}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"DOM 节点操作","description":"","frontmatter":{},"headers":[],"relativePath":"webApi/webapi/domNodeHandle.md","filePath":"webApi/webapi/domNodeHandle.md"}'),e={name:"webApi/webapi/domNodeHandle.md"};function n(p,s,h,d,r,k){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="dom-节点操作" tabindex="-1">DOM 节点操作 <a class="header-anchor" href="#dom-节点操作" aria-label="Permalink to &quot;DOM 节点操作&quot;">​</a></h1><h2 id="dom-节点" tabindex="-1">DOM 节点 <a class="header-anchor" href="#dom-节点" aria-label="Permalink to &quot;DOM 节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>概念：dom 树里面的所有内容都是一个节点</p></li><li><p>分类：</p></li></ol><blockquote><ol><li>元素节点</li><li>属性节点</li><li>文本节点</li></ol></blockquote></div><p> </p><h2 id="查找节点" tabindex="-1">查找节点 <a class="header-anchor" href="#查找节点" aria-label="Permalink to &quot;查找节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>获取子节点：</li></ol><blockquote><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>父元素.childNodes</td><td>拿到所有父元素的子节点，包括子元素、文本、注释...<br>（返回一个伪数组）</td></tr><tr><td>父元素.children</td><td>拿到所有父元素的子元素节点</td></tr></tbody></table></blockquote><p> </p><ol start="2"><li>获取父节点：</li></ol><blockquote><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>子元素.parentNode</td><td>获取父节点</td></tr><tr><td>子元素.parentElement</td><td>与 parentNode 没什么区别，少了一个根节点</td></tr></tbody></table></blockquote><p> </p><ol start="3"><li>兄弟节点：</li></ol><blockquote><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>兄弟元素.previousSibling</td><td>拿到元素的上一个节点(包括文本节点，注释节点)</td></tr><tr><td>兄弟元素.previousElementSibling</td><td>与 parentNode 没什么区别，少了一个根节点</td></tr><tr><td>兄弟元素.nextSibling</td><td>拿到元素的下一个节点(包括文本节点，注释节点)</td></tr><tr><td>兄弟元素.nextElementSibling</td><td>拿到元素的下一个元素</td></tr></tbody></table></blockquote></div><p> </p><h2 id="新增节点" tabindex="-1">新增节点 <a class="header-anchor" href="#新增节点" aria-label="Permalink to &quot;新增节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>docuemnt.createElement(&#39;&#39;)</td><td>会解析标签，所以认为也是创建标签</td></tr></tbody></table><blockquote><ol><li>创建一个空标签，存放于内存</li><li>一般创建好空标签后先往里面添加准备好的结构，再追加到页面</li><li>如需在页面上显示，那就要追加加到其他元素里面</li></ol></blockquote></div><p> </p><h2 id="插入节点" tabindex="-1">插入节点 <a class="header-anchor" href="#插入节点" aria-label="Permalink to &quot;插入节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>父元素.appendChild(子元素)</td><td>追加到最后一个子元素的后面</td></tr><tr><td>父元素.insertBefore(子元素A, 子元素B)</td><td>把子元素 A 插入到子元素 B 之前</td></tr><tr><td colspan="2">H5 新增的方法：</td></tr><tr><td>父元素.inserAdjacentElement(&#39;afterbegin&#39;, 新元素)</td><td>把新元素加到第一个子元素的前面</td></tr><tr><td>父元素.inserAdjacentElement(&#39;beforeend&#39;, 新元素)</td><td>把新元素加到最后一个子元素的后面</td></tr><tr><td>子元素.insertAdjacentElement(&#39;beforebegin&#39;, 新元素)</td><td>把新元素加到选定子元素的前面</td></tr><tr><td>子元素.insertAdjacentElement(&#39;afterend&#39;, 新元素)</td><td>把新元素加到选定子元素的后面</td></tr></tbody></table></div><p> </p><h2 id="删除节点" tabindex="-1">删除节点 <a class="header-anchor" href="#删除节点" aria-label="Permalink to &quot;删除节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>语法：<code>父元素.removeChild(要删除的子元素)</code></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 1.删除父元素里所有的子元素 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul.firstElementChild){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul.firstElementChild);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 2.删除元素的方式1 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 3.删除元素的方式2 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> li3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">li3.parentNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(li3);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><p> </p><h2 id="替换节点" tabindex="-1">替换节点 <a class="header-anchor" href="#替换节点" aria-label="Permalink to &quot;替换节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>语法：<code>父元素.replaceChild(元素A, 元素B)</code>：元素 A 替换元素 B</li></ul></div><p> </p><h2 id="克隆节点" tabindex="-1">克隆节点 <a class="header-anchor" href="#克隆节点" aria-label="Permalink to &quot;克隆节点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>语法：<code>要克隆的元素.cloneNode(布尔类型的参数)</code><blockquote><ul><li>true 是会克隆元素的内容，false 只克隆元素本身，默认为 false</li></ul></blockquote></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> box </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//克隆节点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cloneBox </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  box.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cloneNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修改克隆的节点的id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cloneBox.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;box2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//把克隆的节点追加到页面上.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cloneBox);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div>`,21)]))}const E=i(e,[["render",n]]);export{c as __pageData,E as default};
