import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"基础概念","description":"","frontmatter":{},"headers":[],"relativePath":"javaScript/js/base.md","filePath":"javaScript/js/base.md"}'),e={name:"javaScript/js/base.md"};function t(p,s,h,k,o,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-js-作用" tabindex="-1">1. js 作用： <a class="header-anchor" href="#_1-js-作用" aria-label="Permalink to &quot;1. js 作用：&quot;">​</a></h4><ul><li>主要用于网页的前端开发，控制网页交互性和动态效果；</li></ul><p> </p><h4 id="_2-js-组成" tabindex="-1">2. js 组成： <a class="header-anchor" href="#_2-js-组成" aria-label="Permalink to &quot;2. js 组成：&quot;">​</a></h4><ol><li>ECMAScript：基础语法；</li><li>Web API：DOM（文档对象模型）、BOM（浏览器对象模型）</li></ol><p> </p><h4 id="_3-书写位置" tabindex="-1">3. 书写位置： <a class="header-anchor" href="#_3-书写位置" aria-label="Permalink to &quot;3. 书写位置：&quot;">​</a></h4><ol><li>行内；</li><li>内嵌；</li><li>外链：<code>&lt;script src=&quot;路径&quot;&gt;&lt;/script&gt;</code></li></ol><p> </p><h4 id="_4-数据的表达" tabindex="-1">4. 数据的表达： <a class="header-anchor" href="#_4-数据的表达" aria-label="Permalink to &quot;4. 数据的表达：&quot;">​</a></h4><blockquote><p>JS 提供了三种方式来表达一个数据：</p><ol><li>变量；</li><li>字面量；</li><li>表达式</li></ol><ul><li>程序中任何需要数据的地方，都可以使用上面任意一种数据表达</li></ul></blockquote><p> </p><h4 id="_5-标识符" tabindex="-1">5. 标识符： <a class="header-anchor" href="#_5-标识符" aria-label="Permalink to &quot;5. 标识符：&quot;">​</a></h4><ol><li><p>定义：程序中有些可以自行命名的地方，称之为<strong>标识符</strong></p></li><li><p>常见的标识符：常见的标识符有：变量名、函数名、参数名；</p></li><li><p>JS 的标识符必须符合以下规则：</p></li></ol><blockquote><ol><li>不得以数字开头；</li><li>不能和关键字冲突；</li><li>建议使用驼峰命名法</li></ol></blockquote></div><p> </p><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 多行注释 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p> </p><h2 id="输入输出" tabindex="-1">输入输出 <a class="header-anchor" href="#输入输出" aria-label="Permalink to &quot;输入输出&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 输出 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面弹出框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面输出，可以解析HTML页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制台输出</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 输入 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输入框</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确认框</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><p> </p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>定义：内存中用来存储数据的一块空间</p></li><li><p>声明变量关键字：<code>var、let、const</code></p></li><li><p>基本使用：</p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 批量声明并初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量可以重新赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量的值可以是其他变量的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p> </p><ol start="4"><li>命名规则规范</li></ol><blockquote><ol><li>区分大小写；</li><li>不能以数字开头；</li><li>不能是关键字和保留字</li></ol></blockquote><p> </p><ol start="5"><li>变量作用范围</li></ol><blockquote><ol><li><code>var</code>：</li></ol><blockquote><ol><li>可以重复声明，后面的会覆盖前面的；</li><li>有声明提升，会将声明提升当前作用域（全局作用域 script,function）的最前面；</li><li>作用范围：细化到函数，在函数内部声明为局部变量，在函数外部声明为全局变量</li></ol></blockquote></blockquote><blockquote><ol start="2"><li><code>let</code>：</li></ol><blockquote><ol><li>不能重复声明，且要先声明再使用；</li><li>不会有声明提升；</li><li>作用范围：细化到块级（一个大括号为一个块），在块级内部声明为局部变量，在最大的块级外部声明为全局变量</li></ol></blockquote></blockquote><blockquote><ol start="3"><li><code>const</code>：</li></ol><blockquote><ol><li>特性和 let 基本一样，也有块级作用域，也不能重复声明，也没有声明提升；</li><li>常量一旦定义好，值不能再修改；</li><li>声明常量的时候一定要赋值</li></ol></blockquote></blockquote><blockquote><ol start="4"><li>隐式声明：</li></ol><blockquote><ol><li>不用任何关键字声明的变量，例如 age = 18；</li><li>没有声明提升；</li><li>需要先声明再使用，否则报错；</li><li>作用范围：隐式声明的变量是全局变量，不会被任何作用域约束范围</li></ol></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a is not defined</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><blockquote><ol start="5"><li>作用域链：</li></ol><blockquote><ol><li>多个大括号嵌套；</li><li>如果在当前作用域下,没有该变量的声明,那他就会沿着作用域链往上一级查找，在全局没有找到时就会报错；</li></ol></blockquote></blockquote></div><p> </p><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><h4 id="_1-算术运算符" tabindex="-1">1. 算术运算符 <a class="header-anchor" href="#_1-算术运算符" aria-label="Permalink to &quot;1. 算术运算符&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>算术运算符：<code>加+、减-、乘*、除/、模%</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 3  一个大于10的整数 % 上10 ，结果等于这个数的个位数； 一个正整数%上比它大的数，结果等于它自己</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  491</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p> </p><h4 id="_2-赋值运算符" tabindex="-1">2. 赋值运算符 <a class="header-anchor" href="#_2-赋值运算符" aria-label="Permalink to &quot;2. 赋值运算符&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>普通赋值运算符：<code>=</code></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p> </p><ol start="2"><li>复合赋值运算符（先运算再赋值）：<code>+=、-=、\\*=、%=</code></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相当于 num = num + 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><p> </p><h4 id="_3-关系运算符" tabindex="-1">3. 关系运算符 <a class="header-anchor" href="#_3-关系运算符" aria-label="Permalink to &quot;3. 关系运算符&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>关系运算符：<code>&gt;、&gt;=、&lt;、&lt;=、==、===、!=、!==</code></li></ol><blockquote><ol><li>等于：==</li></ol><blockquote><ol><li>数据类型相同时，直接比较值；</li><li>数据类型不同时，能转为 number 数据类型的数据，先转为数值，再进行值的比较</li><li>特殊：null == undefined，结果为：true</li></ol></blockquote><ol start="2"><li>全等：===</li></ol><blockquote><ul><li>比较数值及数据类型，都相等则为 true：</li></ul><blockquote><ol><li>如果两个值的类型不同，它们就不相同；</li><li>如果两个值的类型是数字，而且值相同，如果其中一个或两个为 NAN，那他们不是等同的；</li><li>如果两个值都是字符串，那么它们一模一样才是等同的；</li><li>如果两个值都是布尔值 true，或者两个值都是布尔值 false，那么它们等同；</li><li>对于复杂数据类型：</li></ol></blockquote></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false，属性相同，但它们是不同的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true，它们引用同一个对象</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li>特殊：</li></ol><blockquote><ol><li>null === null，结果为 true</li><li>undefined === undefined，结果 true</li><li>undefined === null，结果 false</li></ol></blockquote></blockquote><p> </p><blockquote><ol start="2"><li>复合赋值运算符（先运算再赋值）：<code>+=、-=、\\*=、%=</code></li></ol></blockquote></div><p> </p><h4 id="_4-逻辑运算符" tabindex="-1">4. 逻辑运算符 <a class="header-anchor" href="#_4-逻辑运算符" aria-label="Permalink to &quot;4. 逻辑运算符&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><blockquote><h6 id="_1-逻辑运算符-、-、-优先级" tabindex="-1">1. 逻辑运算符：<code>!、&amp;&amp;、||</code> ，（优先级：! &gt; &amp;&amp; &gt; ||） <a class="header-anchor" href="#_1-逻辑运算符-、-、-优先级" aria-label="Permalink to &quot;1. 逻辑运算符：\`!、&amp;&amp;、||\` ，（优先级：! &gt; &amp;&amp; &gt; ||）&quot;">​</a></h6><ol><li><code>!</code>：逻辑非表达式：真变假, 假变真</li><li><code>&amp;&amp;</code>：逻辑与表达式：</li></ol><blockquote><ol><li>结果：有假为假，全真为真</li><li>逻辑表达式的结果不一定是 true/false,也有可能是其他的值</li></ol></blockquote><ol start="3"><li><code>||</code>：逻辑或表达式： <blockquote><ol><li>结果：有真为真，全假为假</li><li>逻辑表达式的结果不一定是 true/false,也有可能是其他的值</li></ol></blockquote></li></ol></blockquote><p> </p><blockquote><h6 id="_2-短路运算" tabindex="-1">2. 短路运算 <a class="header-anchor" href="#_2-短路运算" aria-label="Permalink to &quot;2. 短路运算&quot;">​</a></h6><ol><li>如果参与逻辑运算的第一个式子就能决定整个逻辑表达式的值,那后面的式子就不会运算</li><li>逻辑与：</li></ol><blockquote><ol><li>如果第一个式子能够转成布尔类型的 false，那整个逻辑与表达式的结果就是第一个式子的值</li><li>如果第一个式子不能转成布尔类型的 false，那整个逻辑与表达式的结果就是第二个式子的值</li></ol></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res,num1,num2);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//20, 11, 20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>逻辑或：</li></ol><blockquote><ol><li>如果第一个式子能够转成布尔类型的 true,那整个逻辑或表达式的结果就是第一个式子的值</li><li>如果第一个式子不能转成布尔类型的 true,那整个逻辑或表达式的结果就是第二个式子的值</li></ol></blockquote><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//11</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote></div><p> </p><h4 id="_5-转义符" tabindex="-1">5. 转义符 <a class="header-anchor" href="#_5-转义符" aria-label="Permalink to &quot;5. 转义符&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><blockquote><p>转义符： <code>\\&#39; 单引号、 \\&quot; 双引号、 \\&amp;和号、 \\\\反斜杠、 \\n 换行符、 \\r 回车符、 </code></p></blockquote></div><p> </p><h4 id="_6-数字类型变量自增自减" tabindex="-1">6. 数字类型变量自增自减 <a class="header-anchor" href="#_6-数字类型变量自增自减" aria-label="Permalink to &quot;6. 数字类型变量自增自减&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><blockquote><h6 id="_1-自增" tabindex="-1">1. 自增：<code>++</code> <a class="header-anchor" href="#_1-自增" aria-label="Permalink to &quot;1. 自增：\`++\`&quot;">​</a></h6><ol><li>前自增：<code>++i</code>，先加后算</li><li>后自增：<code>i++</code>，先算后加</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 前自增 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rel)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 后自增 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rel)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></blockquote><p> </p><blockquote><h6 id="_2-自减" tabindex="-1">2. 自减：<code>--</code> <a class="header-anchor" href="#_2-自减" aria-label="Permalink to &quot;2. 自减：\`--\`&quot;">​</a></h6><ol><li>前自减：<code>--i</code>，先减后算</li><li>后自减：<code>i--</code>，先算后减</li></ol></blockquote></div><p> </p><h4 id="_7-字符串拼接" tabindex="-1">7. 字符串拼接 <a class="header-anchor" href="#_7-字符串拼接" aria-label="Permalink to &quot;7. 字符串拼接&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>当<code>+</code>的两端有一个是字符串时，不再进行算术运算，而变为字符串拼接</p></div><p> </p><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h4 id="显示转换" tabindex="-1">显示转换 <a class="header-anchor" href="#显示转换" aria-label="Permalink to &quot;显示转换&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h6 id="_1-其他类型转-number-类型" tabindex="-1">1. 其他类型转 number 类型： <a class="header-anchor" href="#_1-其他类型转-number-类型" aria-label="Permalink to &quot;1. 其他类型转 number 类型：&quot;">​</a></h6><blockquote><ol><li>其他类型转<code>Number()</code>：</li></ol><blockquote><ol><li>字符串中是纯数字的转换之后结果为数字， 不是纯数字的转换之后结果为 NaN；</li><li>空字符串&quot;&quot;, 还有空格字符串&quot; &quot;, 都转成 0；</li><li>null 转成 0, undefined 转成 NaN；</li><li>true 转为 1，false 转为 0</li><li>其他类型转成整数<code>parseInt()</code>：</li></ol></blockquote><blockquote><ol><li>从左往右查找,直到找到第一个非数字停下来，前面的就是转换的内容；</li><li>如果第一个非数字前面没有数字,那就转成 NaN</li><li>其他类型转成小数<code>parseFloat() </code>：</li></ol></blockquote><blockquote><ol><li>从左往右查找,找到第一个非数字(不包括第 一 个小数点)停下来,前面的就是转换的内容；</li><li>如果找到的第一个非数字前面没有数字,那就 转成 NaN</li></ol></blockquote><ol start="4"><li>取精度：<code>toFixed()</code></li></ol></blockquote><p> </p><h6 id="_2-其他类型转-string-类型" tabindex="-1">2. 其他类型转 string 类型： <a class="header-anchor" href="#_2-其他类型转-string-类型" aria-label="Permalink to &quot;2. 其他类型转 string 类型：&quot;">​</a></h6><blockquote><ol><li>其他类型转<code>.String()</code>：</li></ol><blockquote><ul><li>把原来的值用引号引起来即可</li></ul></blockquote></blockquote><blockquote><ol start="2"><li>其他类型转<code>.toString();</code>： <blockquote><ol><li>把原来的值用引号引起来即可；</li><li>null 和 undefined 不能用</li></ol></blockquote></li></ol></blockquote><p> </p><h6 id="_3-其他类型转-boolean-类型-boolean" tabindex="-1">3. 其他类型转 boolean 类型：<code>Boolean()</code> <a class="header-anchor" href="#_3-其他类型转-boolean-类型-boolean" aria-label="Permalink to &quot;3. 其他类型转 boolean 类型：\`Boolean()\`&quot;">​</a></h6><blockquote><ul><li>转成布尔类型值为 false 的数据: 0、undefined、null、&quot;&quot;、NaN，其他都转为布尔类型值 true</li></ul></blockquote></div><p> </p><h4 id="隐式转换" tabindex="-1">隐式转换 <a class="header-anchor" href="#隐式转换" aria-label="Permalink to &quot;隐式转换&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h6 id="_1-其他类型转-number" tabindex="-1">1. 其他类型转 number： <a class="header-anchor" href="#_1-其他类型转-number" aria-label="Permalink to &quot;1. 其他类型转 number：&quot;">​</a></h6><blockquote><ol><li>方式 1：在转换的数据前加一个 + 号；</li><li>方式 2：参与数学运算的数据变为 number 类型（注意：要分辨 + 号是数学运算还是字符串拼接）</li></ol></blockquote><p> </p><h6 id="_2-其他类型转-string" tabindex="-1">2. 其他类型转 string： <a class="header-anchor" href="#_2-其他类型转-string" aria-label="Permalink to &quot;2. 其他类型转 string：&quot;">​</a></h6><blockquote><ul><li>和空字符串做拼接即可</li></ul></blockquote><p> </p><h6 id="_3-其他类型转-boolean-类型" tabindex="-1">3. 其他类型转 boolean 类型： <a class="header-anchor" href="#_3-其他类型转-boolean-类型" aria-label="Permalink to &quot;3. 其他类型转 boolean 类型：&quot;">​</a></h6><blockquote><ul><li>取反再取反（如：!! null 结果：false （因为 null 布尔值为 false））</li></ul></blockquote></div><p> </p><h4 id="isnan-存在转换" tabindex="-1">isNaN()存在转换 <a class="header-anchor" href="#isnan-存在转换" aria-label="Permalink to &quot;isNaN()存在转换&quot;">​</a></h4><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h6 id="isnan-存在转换-对于转字符串而言" tabindex="-1">isNaN()存在转换（对于转字符串而言）： <a class="header-anchor" href="#isnan-存在转换-对于转字符串而言" aria-label="Permalink to &quot;isNaN()存在转换（对于转字符串而言）：&quot;">​</a></h6><blockquote><ol><li>如果字符串里面为纯数字，那么会先将字符串转为数字，isNaN()再进行判断， NaN 为非数字，所以值为 False；</li><li>如果字符串里面没有数字，那么 isNaN()直接判断，是 NaN，值为 true；</li><li>如果字符串里面既有数字又有非数字，那么 isNaN()直接判断，是 NaN，值为 true</li></ol></blockquote></div>`,44)]))}const u=i(e,[["render",t]]);export{c as __pageData,u as default};
