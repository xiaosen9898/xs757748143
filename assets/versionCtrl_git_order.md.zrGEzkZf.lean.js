import{_ as e,c as t,a4 as o,o as l}from"./chunks/framework.BvVMNBiX.js";const g=JSON.parse('{"title":"Git 命令","description":"","frontmatter":{},"headers":[],"relativePath":"versionCtrl/git/order.md","filePath":"versionCtrl/git/order.md"}'),c={name:"versionCtrl/git/order.md"};function a(d,i,r,s,n,p){return l(),t("div",null,i[0]||(i[0]=[o('<h1 id="git-命令" tabindex="-1">Git 命令 <a class="header-anchor" href="#git-命令" aria-label="Permalink to &quot;Git 命令&quot;">​</a></h1><h2 id="基本命令" tabindex="-1">基本命令 <a class="header-anchor" href="#基本命令" aria-label="Permalink to &quot;基本命令&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li><code>git init</code>：git初始化</li><li><code>git status</code>：查看文件状态</li><li><code>git add .</code>：将当前目录下所有文件由工作区添加到暂存区</li><li><code>git commit -m &quot;提交说明&quot;</code>：将文件从暂存区提交到仓库</li><li><code>git commit --amend -m &quot;提交说明&quot;</code>：修改最近的一次提交说明</li><li><code>git log</code>：查看提交的日志，能获取到提交的版本号</li><li><code>git log --oneline</code>：查看并将每次提交的日志通过一 行显示</li><li><code>git reflog</code>：查看所有日志，包括回退操作的日志</li><li><code>git diff</code>：可以查看每次提交的内容的不同</li><li><code>git diff --cached</code>：查看暂存区与仓库区的不同</li><li><code>git diff HEAD</code>：查看工作区与仓库区的不同，HEAD表示最新的那次提交</li><li><code>git reset --hard 版本号</code>：将代码回退到某个指定的版本(版本号只要有前7位即可)</li><li><code>git reset --hard head~1</code>：将版本回退到上一次提交</li></ul></div><p> </p><h2 id="分支命令" tabindex="-1">分支命令 <a class="header-anchor" href="#分支命令" aria-label="Permalink to &quot;分支命令&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>作用：让自己的操作不影响其他人的使用：封闭，不受影响的一种操作</p></li><li><p>分支命令：</p></li></ol><blockquote><ul><li><code>git branch</code>：查看分支（查看的时候，当前分支前面带有 * 号）</li><li><code>git branch 分支名称</code>：创建分支（不能重名，创建一个分支相当于拷贝原始代码，所以分支代码和原始代码一样）</li><li><code>git checkout 分支名称</code>：切换分支（在当前分支的任何操作（提交），都不会影响到其他的分支，除非进行了分支合并）</li><li><code>git switch 分支名</code>：切换分支（新）</li><li><code>git switch -c 新分支名</code>：创建并切换分支（新）</li><li><code>git merge 分支名称</code>：合并分支（想将其他分支合并到master分支，则先切换到master分支）</li><li><code>git branch -d 分支名称</code>：删除分支（注意：不能在当前分支删除分支自己）</li></ul></blockquote></div><p> </p><h2 id="分支合并冲突" tabindex="-1">分支合并冲突 <a class="header-anchor" href="#分支合并冲突" aria-label="Permalink to &quot;分支合并冲突&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>两个不同的分支修改同一文件同行代码，之后合并到master分支</p></li><li><p>出现冲突应该手动解决，记得还需再次提交</p></li></ol></div>',9)]))}const u=e(c,[["render",a]]);export{g as __pageData,u as default};
