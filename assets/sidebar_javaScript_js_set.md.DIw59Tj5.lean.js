import{_ as a,c as i,a2 as t,o as e}from"./chunks/framework.D3LXhGAZ.js";const g=JSON.parse('{"title":"引用数据类型-集合","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/javaScript/js/set.md","filePath":"sidebar/javaScript/js/set.md"}'),n={name:"sidebar/javaScript/js/set.md"};function l(p,s,h,r,k,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="引用数据类型-集合" tabindex="-1">引用数据类型-集合 <a class="header-anchor" href="#引用数据类型-集合" aria-label="Permalink to &quot;引用数据类型-集合&quot;">​</a></h1><h2 id="集合-set" tabindex="-1">集合 Set <a class="header-anchor" href="#集合-set" aria-label="Permalink to &quot;集合 Set&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>集合 Set：是一种无序且不重复的集合，主要用于存储唯一值</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> set </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {1, 2, 3}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. add(value): 添加元素；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. delete(value): 删除元素；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. has(value): 检查是否存在某个元素；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. clear(): 清空集合；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. size: 返回集合元素个数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div><p> </p><h2 id="集合-map" tabindex="-1">集合 Map <a class="header-anchor" href="#集合-map" aria-label="Permalink to &quot;集合 Map&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>集合 Map：是一种键值对集合，键和值都可以是任意类型（包括对象）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. set(key, value): 添加键值对；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. get(key): 根据键获取值；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. delete(key): 删除键值对；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. has(key): 检查是否存在某个键；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5. clear(): 清空集合；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6. size: 返回集合中键值对的数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><p> </p><h2 id="集合的总结" tabindex="-1">集合的总结 <a class="header-anchor" href="#集合的总结" aria-label="Permalink to &quot;集合的总结&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><table tabindex="0"><thead><tr><th>集合类型</th><th style="text-align:center;">特点</th><th style="text-align:right;">键类型</th><th style="text-align:center;">值类型</th></tr></thead><tbody><tr><td>Set</td><td style="text-align:center;">无序且唯一</td><td style="text-align:right;">任意类型</td><td style="text-align:center;">任意类型</td></tr><tr><td>WeakSet</td><td style="text-align:center;">只能存对象、弱引用</td><td style="text-align:right;">对象</td><td style="text-align:center;">对象</td></tr><tr><td>Map</td><td style="text-align:center;">键值对、可任意类型</td><td style="text-align:right;">任意类型</td><td style="text-align:center;">任意类型</td></tr><tr><td>WeakMap</td><td style="text-align:center;">键只能是对象、弱引用</td><td style="text-align:right;">对象</td><td style="text-align:center;">任意类型</td></tr></tbody></table></div>`,9)]))}const o=a(n,[["render",l]]);export{g as __pageData,o as default};
