import{_ as e,c as n,a4 as a,j as s,a as l,o as t}from"./chunks/framework.BvVMNBiX.js";const p="/xs757748143/imgs/vue2/vnode.jpg",E=JSON.parse('{"title":"VUE2 基础","description":"","frontmatter":{},"headers":[],"relativePath":"vue/v2/base.md","filePath":"vue/v2/base.md"}'),h={name:"vue/v2/base.md"};function o(r,i,d,k,c,u){return t(),n("div",null,i[0]||(i[0]=[a('<h1 id="vue2-基础" tabindex="-1">VUE2 基础 <a class="header-anchor" href="#vue2-基础" aria-label="Permalink to &quot;VUE2 基础&quot;">​</a></h1><h2 id="模版语法" tabindex="-1">模版语法 <a class="header-anchor" href="#模版语法" aria-label="Permalink to &quot;模版语法&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>语法： {{ 表达式 }}</li><li>作用：使用 data 中的数据渲染视图</li><li>注意：</li></ol><blockquote><ul><li>使用的数据必须在 data 选项中存在</li><li>能使用表达式，但是不能使用语句 if for ...</li><li>不能在标签属性中使用 {{ }} 插值</li></ul></blockquote></div><p> </p><h2 id="组件选项" tabindex="-1">组件选项 <a class="header-anchor" href="#组件选项" aria-label="Permalink to &quot;组件选项&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h4><ul><li>作用：给当前组件取一个名称</li></ul></div>',6),s("div",{class:"tip custom-block github-alert"},[s("p",{class:"custom-block-title"},"TIP"),s("p"),s("h4",{id:"components",tabindex:"-1"},[l("components "),s("a",{class:"header-anchor",href:"#components","aria-label":'Permalink to "components"'},"​")]),s("ol",null,[s("li",null,"作用：某个组件中，注册子组件的地方"),s("li",null,"使用：")]),s("blockquote",null,[s("ol",null,[s("li",null,"引入：import Comp from '路径'"),s("li",{Comp:""},"注册：components:"),s("li",null,[l("使用："),s("code",null,"<Comp />")])])])],-1),a(`<div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h4><ul><li>作用：return 返回的对象里，是声明变量的地方</li></ul></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h4><ol><li>作用：一个特殊属性，值依赖于另外一些数据动态计算出来</li><li>特点：</li></ol><blockquote><ol><li>计算后会立刻缓存，下次直接读缓存</li><li>依赖项改变，函数会重新执行并重新缓存</li></ol></blockquote><p>注意：</p><blockquote><ol><li>计算属性必须定义在 computed 节点中</li><li>计算属性必须有返回值</li><li>计算属性实质是一个属性，要作为属性来用</li></ol></blockquote></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="methods" tabindex="-1">methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;methods&quot;">​</a></h4><ol><li>作用：声明函数的地方</li><li>使用：</li></ol><blockquote><ul><li><code>方法名() { 函数体 }</code></li><li>方法用到 data 的成员时，需要 this.成员（固定写法）</li></ul></blockquote></div><p> </p><h2 id="vue-指令" tabindex="-1">vue 指令 <a class="header-anchor" href="#vue-指令" aria-label="Permalink to &quot;vue 指令&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>定义：特殊的 html 标签属性（特点: v- 开头）</p><p>作用：每个 v- 开头的指令, 都有着自己独立的功能, 将来 vue 解析时, 会根据不同的指令提供不同的功能</p><h4 id="_1-v-bind" tabindex="-1">1. v-bind <a class="header-anchor" href="#_1-v-bind" aria-label="Permalink to &quot;1. v-bind&quot;">​</a></h4><ol><li>语法：<code>v-bind:属性名 = &quot;值&quot;</code></li><li>简写：<code>:属性名 = &quot;值&quot;</code></li><li>作用：绑定标签的属性，使其值变成变量形式</li></ol><p> </p><h4 id="_2-v-on" tabindex="-1">2. v-on <a class="header-anchor" href="#_2-v-on" aria-label="Permalink to &quot;2. v-on&quot;">​</a></h4><ol><li>语法 1：<code>v-on:事件类型 = &quot;执行语句&quot;</code>，简写：<code>@事件类型 = &quot;执行语句&quot;</code></li><li>语法 2：<code>v-on:事件类型 = &quot;函数名(参数)&quot;</code>，简写：<code>@事件类型 = &quot;函数名(实参)&quot;</code></li><li>作用：给标签绑定事件</li><li>其他：监听多个事件</li></ol><p> </p><h4 id="_3-v-for" tabindex="-1">3. v-for <a class="header-anchor" href="#_3-v-for" aria-label="Permalink to &quot;3. v-for&quot;">​</a></h4><ol><li>循环类型：</li></ol><blockquote><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-gVBK0" id="tab-qVMHwNj" checked><label data-title="数组" for="tab-qVMHwNj">数组</label><input type="radio" name="group-gVBK0" id="tab-OC6oFiP"><label data-title="对象" for="tab-OC6oFiP">对象</label><input type="radio" name="group-gVBK0" id="tab-umYNQEB"><label data-title="数字" for="tab-umYNQEB">数字</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(item，index) in 数组&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;item.id&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(value, key, index) in 对象&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;key&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // （value 是值，key 是键，index是索引）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;item in 数字&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;item&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // item 从 1 开始，包括数字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div></blockquote><ol start="2"><li>说明：</li></ol><blockquote><ol><li><p>key 属性主要是用于优化虚拟 DOM 的渲染性能的，相当于是给虚拟 DOM 元素一个唯一性标识</p></li><li><p>使用 v-for 循环渲染的时候也可以使用 template 来循环多个元素，此时 key 就挂在 template 标签上面</p></li><li><p>v-for 也是存在作用域的，作用域的工作方式和 JS 中的作用域工作方式类似</p></li><li><p>vue2 中 v-for 优先级高于 v-if</p></li></ol></blockquote><ol start="3"><li>注意：不要同时使用 v-if 和 v-for（这里官方所谓的同时使用，指的是不要在一个元素上面同时使用）</li></ol><blockquote><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在外新包装一层 template，这样可以满足上面的需求的同时代码也更加易读 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!item.done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {{ item.name }} &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote><p> </p><h4 id="_4-v-if" tabindex="-1">4. v-if <a class="header-anchor" href="#_4-v-if" aria-label="Permalink to &quot;4. v-if&quot;">​</a></h4><ol><li><code>v-if</code>：</li></ol><blockquote><ol><li>语法：<code>v-if=&quot;布尔值&quot;</code> （true 显示, false 隐藏）</li><li>作用：控制盒子的显示隐藏</li><li>原理：实质是在动态的创建/删除元素节点</li><li>应用场景：如果是不用频繁切换, 要么显示, 要么隐藏的情况, 适合于用 v-if</li></ol></blockquote><ol start="2"><li><code>v-else</code>：</li></ol><blockquote><ol><li>语法：<code>v-else=&quot;布尔值&quot;</code> （true 显示, false 隐藏）</li><li>作用：控制盒子的显示隐藏</li></ol></blockquote><ol start="3"><li><code>v-else-if</code>：</li></ol><blockquote><ol><li>语法：<code>v-else-if=&quot;布尔值&quot;</code> （true 显示, false 隐藏）</li><li>作用：控制盒子的显示隐藏</li></ol></blockquote><p> </p><h4 id="_5-v-show" tabindex="-1">5. v-show <a class="header-anchor" href="#_5-v-show" aria-label="Permalink to &quot;5. v-show&quot;">​</a></h4><ol><li>语法 1：<code>v-show=&quot;布尔值&quot;</code> （true 显示, false 隐藏）</li><li>作用：控制盒子的显示/隐藏</li><li>原理：实质是在控制元素的 css 样式，<code>display: none;</code></li><li>应用场景：如果是频繁的切换显示隐藏, 用<code>v-show</code></li></ol><p> </p><h4 id="_6-v-model" tabindex="-1">6. v-model <a class="header-anchor" href="#_6-v-model" aria-label="Permalink to &quot;6. v-model&quot;">​</a></h4><ol><li>语法：<code>v-model = &quot;值&quot;</code></li><li>作用：双向数据绑定，给表单元素使用，数据 ⇄ 视图</li><li>注意：v-model 会忽略掉表单元素原本的 value, checked 等初始值</li><li>v-model 修饰符：</li></ol><blockquote><ol><li><code>.number</code>：把数据类型转为 parseFloat 类型；</li><li><code>.trim</code>：去除数据（变量）首尾空白字符；</li><li><code>.lazy</code>：表单失去焦点，才把值赋给数据（变量）</li></ol></blockquote><p> </p><h4 id="_7-v-text" tabindex="-1">7. v-text <a class="header-anchor" href="#_7-v-text" aria-label="Permalink to &quot;7. v-text&quot;">​</a></h4><ol><li>语法：<code>v-text=&quot;值&quot;</code></li><li>作用：更新元素的 innerText</li><li>注意：不会解析标签</li></ol><p> </p><h4 id="_8-v-html" tabindex="-1">8. v-html <a class="header-anchor" href="#_8-v-html" aria-label="Permalink to &quot;8. v-html&quot;">​</a></h4><ol><li>语法：<code>v-html=&quot;值&quot;</code></li><li>作用：更新元素的 innerHTML</li><li>注意：会解析标签</li></ol></div><p> </p><h2 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>作用：一个特殊属性，值依赖于另外一些数据动态计算出来</li><li>特点：</li></ol><blockquote><ul><li>计算后会立刻缓存，下次直接读缓存</li><li>依赖项改变，函数会重新执行并重新缓存</li></ul></blockquote><ol start="3"><li>语法：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 语法1 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     属性名(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;值&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 语法2 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">computed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    属性名: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }，</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(参数){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         //修改的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. get为计算逻辑，set为修改逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 当修改计算属性，会触发set函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. get方法必须返回一个值，这个值会返回给“属性名”</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. get方法的值会作为set方法的实参</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="4"><li>注意：</li></ol><blockquote><ul><li>计算属性必须定义在 computed 节点中</li><li>计算属性必须有返回值</li><li>计算属性实质是一个属性，要作为属性来用</li></ul></blockquote></div><p> </p><h2 id="侦听器" tabindex="-1">侦听器 <a class="header-anchor" href="#侦听器" aria-label="Permalink to &quot;侦听器&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>作用：可以侦听到 data/computed 属性值的改变</li><li>侦听方式：</li></ol><blockquote><ol><li>基本类型：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     要侦听的属性名 (newValue,oldValue){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>引用类型：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  要侦听的复杂类型属性名：{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  immediate：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//立即执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  deep：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//深度侦听复杂类型的变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  handler（newValue,oldValue）{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 执行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></blockquote></div><p> </p><h2 id="生命周期-hook-函数" tabindex="-1">生命周期 hook 函数 <a class="header-anchor" href="#生命周期-hook-函数" aria-label="Permalink to &quot;生命周期 hook 函数&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><code>created()</code></li><li><code>mounted()</code></li><li><code>updated()</code>、<code>$nextTick()</code></li><li><code>destroyed()</code></li></ol></div><p> </p><h2 id="类与样式绑定" tabindex="-1">类与样式绑定 <a class="header-anchor" href="#类与样式绑定" aria-label="Permalink to &quot;类与样式绑定&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-控制类" tabindex="-1">1. 控制类 <a class="header-anchor" href="#_1-控制类" aria-label="Permalink to &quot;1. 控制类&quot;">​</a></h4><ol><li>语法：</li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-91nEs" id="tab-PvhcFJ4" checked><label data-title="语法1" for="tab-PvhcFJ4">语法1</label><input type="radio" name="group-91nEs" id="tab-xeYv6yr"><label data-title="语法2" for="tab-xeYv6yr">语法2</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{类名: 布尔值}&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果键值对的值为 true，那么就有这个类，否则没有这个类</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[类名1，类名2]&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 数组中所有的类，都会添加到元素上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><ol start="2"><li>注意：</li></ol><blockquote><ul><li>class 不会影响到原来的 class 属性</li><li>类名如果带-，则只能用单引号引起来：<code>:class=&quot;{&#39;text-center&#39;: true}&quot;</code></li></ul></blockquote><p> </p><h4 id="_2-控制行内样式" tabindex="-1">2. 控制行内样式 <a class="header-anchor" href="#_2-控制行内样式" aria-label="Permalink to &quot;2. 控制行内样式&quot;">​</a></h4><ol><li>语法：</li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ZIzFz" id="tab-uvAppV9" checked><label data-title="语法1" for="tab-uvAppV9">语法1</label><input type="radio" name="group-ZIzFz" id="tab-6Nd9Ssj"><label data-title="语法2" for="tab-6Nd9Ssj">语法2</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{样式名: 样式的值}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[{ 样式名: 样式的值 }, {样式名: 样式的值 }...]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><ol start="2"><li>注意：</li></ol><blockquote><ul><li>样式名如果带横线，可以用小驼峰或者单引号</li></ul></blockquote></div><p> </p><h2 id="vue-的虚拟-dom" tabindex="-1">vue 的虚拟 DOM <a class="header-anchor" href="#vue-的虚拟-dom" aria-label="Permalink to &quot;vue 的虚拟 DOM&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>背景：直接操作真实的 DOM 会消耗大量性能，效率很低</p></li><li><p>虚拟 DOM：</p></li></ol><blockquote><ol><li>作用：用来描述标签的信息的 js 对象；虚拟 dom 对比性能高，对比出变化的内容，减少 dom 操作；</li><li>本质：普通的 JS 对象，用于描述界面上的标签</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vnode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { tag: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;标题&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></blockquote><ol start="3"><li>渲染过程：</li></ol><blockquote><ol><li><p><strong>vue 模板并不是真实的 DOM</strong>，它会被编译为虚拟 DOM</p></li><li><p>虚拟 DOM 树会最终生成为真实的 DOM 树；</p></li><li><p>当修改数据的时候，会生成新的虚拟 DOM，与旧的虚拟 DOM 进行对比，找出差异，然后仅把差异部分应用到真实 dom tree 中</p></li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Ny3Rn" id="tab-LUWwsN8" checked><label data-title="初次渲染" for="tab-LUWwsN8">初次渲染</label><input type="radio" name="group-Ny3Rn" id="tab-XYQqUck"><label data-title="修改数据" for="tab-XYQqUck">修改数据</label></div><div class="blocks"><div class="language-html vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;标题：{{&#39;Hello World&#39;}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;时间：{{&#39;2025年04月28日&#39;}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 虚拟DOM --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: &quot;div&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: &quot;h1&quot;, children: [ { text: &quot;标题：Hello World&quot; } ] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: &quot;p&quot;, children: [ { text: &quot;时间：2022年05月09日&quot; } ] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;标题：{{&#39;Hello VUE&#39;}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;时间：{{&#39;2025年04月28日&#39;}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 虚拟DOM --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: &quot;div&quot;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: &quot;h1&quot;, children: [ { text: &quot;标题：Hello VUE&quot; } ] },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: &quot;p&quot;, children: [ { text: &quot;时间：2022年05月09日&quot; } ] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div></div><p><img src="`+p+'" alt="vnode" data-fancybox=""></p></blockquote><ol start="4"><li>挂载：将生成的真实 DOM 树，放置到某个元素位置，称之为<strong>挂载</strong></li></ol><blockquote><p>挂载的方式：</p><blockquote><ol><li>通过<code>el:&quot;css选择器&quot;</code>进行配置；</li><li>通过<code>vue实例.$mount(&quot;css选择器&quot;)</code>进行配置</li></ol></blockquote></blockquote></div><p> </p><h2 id="vue-的预编译" tabindex="-1">vue 的预编译 <a class="header-anchor" href="#vue-的预编译" aria-label="Permalink to &quot;vue 的预编译&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>概念：当<code>vue-cli</code>进行<strong>打包</strong>时，会直接把组件中的模板转换为<code>render</code>函数，这叫做模板预编译</p></li><li><p>好处：</p></li></ol><blockquote><ol><li>运行时就不再需要编译模板了，提高了运行效率；</li><li>打包结果中不再需要 vue 的编译代码，减少了打包体积</li></ol></blockquote></div><p> </p><h2 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;$nextTick&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>背景：Vue 在数据变化后，DOM 更新是异步的</li><li>作用：等 DOM 更新后, 才会触发执行此方法里的函数体</li><li>使用：<code>this.nextTick(( ) =&gt; { 函数体 })</code></li></ol></div>',27)]))}const g=e(h,[["render",o]]);export{E as __pageData,g as default};
