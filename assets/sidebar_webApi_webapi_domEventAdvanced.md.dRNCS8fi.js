import{_ as s,c as a,a2 as l,o as e}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"DOM 事件高级","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/webApi/webapi/domEventAdvanced.md","filePath":"sidebar/webApi/webapi/domEventAdvanced.md"}'),t={name:"sidebar/webApi/webapi/domEventAdvanced.md"};function n(p,i,o,h,k,r){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="dom-事件高级" tabindex="-1">DOM 事件高级 <a class="header-anchor" href="#dom-事件高级" aria-label="Permalink to &quot;DOM 事件高级&quot;">​</a></h1><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>定义：事件对象就是用来记录事件触发时产生的信息（比如触发事件的坐标），用参数e来获取产生的信息</p></li><li><p>语法：</p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;事件类型&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><p>事件源：比如鼠标点击时选中的元素</p></li><li><p>事件对象的常用属性：</p></li></ol><blockquote><ol><li><code>e.pageX</code>：当前触发事件的这一坐标点与页面左上角的水平距离</li><li><code>e.pageY</code>：当前触发事件的这一坐标点与页面左上角的垂直距离</li><li><code>e.key</code>：获取按下的那个键</li></ol></blockquote></div><p> </p><h2 id="阻止默认行为" tabindex="-1">阻止默认行为 <a class="header-anchor" href="#阻止默认行为" aria-label="Permalink to &quot;阻止默认行为&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>背景：a标签、表单等会有默认跳转的行为</li><li>阻止默认行为三个方式：</li></ol><blockquote><ol><li><code>e.preventDefault()</code></li><li><code>href = &quot;javascript:void(0)&quot;</code></li><li><code>return false</code></li></ol><blockquote><ul><li>注意：事件监听只能使用e.preventDefault();来阻止默认跳转</li></ul></blockquote></blockquote></div><p> </p><h2 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>事件流三个阶段</li></ol><blockquote><ol><li>捕获阶段→目标阶段→冒泡阶段</li><li>e.eventPhase：输出阶段代码：捕获为1、目标为2、冒泡为3</li></ol></blockquote><ol start="2"><li>冒泡与捕获：</li></ol><blockquote><ol><li>事件冒泡：如果某个元素的某个事件被触发,那该元素的所有父级元素的同名事件也会被触发（从内到外）</li></ol><blockquote><ol><li>使用on+事件名称的这种方式注册事件,默认就是有事件冒泡的；</li><li>有触发事件的动作,那他的同名事件也会被冒泡触发</li></ol></blockquote><ol start="2"><li>事件捕获：元素触发某个事件,从最外层的父级同名事件开始 依次递减到自己（从外到内）</li></ol></blockquote><blockquote><ul><li>事件监听有三个参数，第三个参数为布尔类型：如果是true，表示支持捕获；如果是false，表示支持冒泡；不写默认为false</li></ul></blockquote><ol start="3"><li>阻止事件流动：<code>e.stopPropagation()</code></li></ol></div><p> </p><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>使用：给某个祖先元素注册事件</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.tagName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;LI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.innerHTML);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>好处：减少注册事件的次数，支持动态注册（原理：事件冒泡）</li></ul></div>`,12)]))}const u=s(t,[["render",n]]);export{c as __pageData,u as default};
