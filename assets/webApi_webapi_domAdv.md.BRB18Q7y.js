import{_ as i,c as a,a2 as t,o as l}from"./chunks/framework.D3LXhGAZ.js";const n="/xs757748143/imgs/webApi/event.jpg",E=JSON.parse('{"title":"DOM 进阶","description":"","frontmatter":{},"headers":[],"relativePath":"webApi/webapi/domAdv.md","filePath":"webApi/webapi/domAdv.md"}'),e={name:"webApi/webapi/domAdv.md"};function p(h,s,r,d,k,o){return l(),a("div",null,s[0]||(s[0]=[t(`<h1 id="dom-进阶" tabindex="-1">DOM 进阶 <a class="header-anchor" href="#dom-进阶" aria-label="Permalink to &quot;DOM 进阶&quot;">​</a></h1><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>定义：事件对象就是用来记录事件触发时产生的信息（比如触发事件的坐标），用参数 e 来获取产生的信息</p></li><li><p>语法：</p></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;事件类型&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="3"><li><p>事件源：比如鼠标点击时选中的元素</p></li><li><p>事件对象的常用属性：</p></li></ol><blockquote><ol><li><code>e.pageX</code>：当前触发事件的这一坐标点与页面左上角的水平距离</li><li><code>e.pageY</code>：当前触发事件的这一坐标点与页面左上角的垂直距离</li><li><code>e.key</code>：获取按下的那个键</li></ol></blockquote></div><p> </p><h2 id="事件默认行为" tabindex="-1">事件默认行为 <a class="header-anchor" href="#事件默认行为" aria-label="Permalink to &quot;事件默认行为&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>背景：某些元素的某些事件，浏览器会有自己的默认行为</li></ul><p>例如：</p><blockquote><ol><li>a 元素的 click 事件，浏览器会跳转页面；</li><li>form 元素的 submit 事件，浏览器会提交表单，最终导致页面刷新；</li><li>文本框的 keydown 事件，浏览器会将按键文本显示到文本框中</li></ol></blockquote><ul><li>解决：阻止默认行为</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// e为事件对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// href = &quot;javascript:void(0)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// return false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><p> </p><h2 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>事件流三个阶段</li></ol><blockquote><ol><li>捕获阶段 → 目标阶段 → 冒泡阶段</li><li>e.eventPhase：输出阶段代码：捕获为 1、目标为 2、冒泡为 3</li></ol></blockquote><ol start="2"><li>冒泡与捕获：</li></ol><blockquote><ol><li>事件冒泡：如果某个元素的某个事件被触发,那该元素的所有父级元素的同名事件也会被触发（从内到外）</li></ol><blockquote><ol><li>使用 on+事件名称的这种方式注册事件,默认就是有事件冒泡的；</li><li>有触发事件的动作,那他的同名事件也会被冒泡触发</li></ol></blockquote><ol start="2"><li>事件捕获：元素触发某个事件,从最外层的父级同名事件开始 依次递减到自己（从外到内）</li></ol></blockquote><blockquote><ul><li>事件监听有三个参数，第三个参数为布尔类型：如果是 true，表示支持捕获；如果是 false，表示支持冒泡；不写默认为 false</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在冒泡阶段触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在捕获阶段触发事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在冒泡阶段触发事件（默认）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote><ol start="3"><li>事件处理函数：<code>e.stopPropagation()</code></li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.target; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取事件源（目标阶段的dom）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止事件继续冒泡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+n+'" alt="效果图" data-fancybox=""></p></div><p> </p><h2 id="事件委托" tabindex="-1">事件委托 <a class="header-anchor" href="#事件委托" aria-label="Permalink to &quot;事件委托&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>使用：给某个祖先元素注册事件</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.tagName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;LI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.target.innerHTML);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>好处：减少注册事件的次数，支持动态注册（原理：事件冒泡）</li></ul></div><p> </p><h2 id="屏幕三大家族" tabindex="-1">屏幕三大家族 <a class="header-anchor" href="#屏幕三大家族" aria-label="Permalink to &quot;屏幕三大家族&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h3 id="_1-offset" tabindex="-1">1. <code>offset</code> <a class="header-anchor" href="#_1-offset" aria-label="Permalink to &quot;1. `offset`&quot;">​</a></h3><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>offsetParent</td><td>找到自己最近一级有定位的祖先元素</td></tr><tr><td colspan="2"> offsetParent说明：<br> 如果自己有固定定位，那该元素的 offsetParent 为 null；<br> 如果自己没有固定定位，祖先级没有定位，那该元素的 offsetParent 是 body；<br> 如果自己没有固定定位，祖先级有定位，那该元素的 offsetParent 是离自己最近有固定定位的祖先元素；<br> body 的 offsetParent 为 null</td></tr><tr><td>offsetLeft</td><td>自己的左外边框到该盒子的 offsetParent 的左内边框的距离</td></tr><tr><td>offsetTop</td><td>自己的上外边框到该盒子的 offsetParent 的上内边框的距离</td></tr><tr><td>offsetWidth</td><td>盒子除去外边距时的宽度</td></tr><tr><td>offsetHeight</td><td>盒子除去外边距时的高度</td></tr></tbody></table><p> </p><h3 id="_2-scroll" tabindex="-1">2. <code>scroll</code> <a class="header-anchor" href="#_2-scroll" aria-label="Permalink to &quot;2. `scroll`&quot;">​</a></h3><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>scrollLeft</td><td>元素左边被隐藏的内容+盒子边框</td></tr><tr><td>scrollTop</td><td>元素上边被隐藏的内容+盒子边框</td></tr><tr><td>scrollWidth</td><td>内容的真实宽度</td></tr><tr><td>scrollHeight</td><td>内容的真实高度</td></tr><tr><td>document.documentElement.scrollLeft</td><td>获取页面左边滚出去的距离</td></tr><tr><td>document.documentElement.scrollTeft</td><td>获取页面上边滚出去的距离</td></tr></tbody></table><p> </p><h3 id="_3-client" tabindex="-1">3. <code>client</code> <a class="header-anchor" href="#_3-client" aria-label="Permalink to &quot;3. `client`&quot;">​</a></h3><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>clientWidth</td><td>除去边框之外的宽度</td></tr><tr><td>clientHeight</td><td>除去边框之外的高度</td></tr></tbody></table></div>',15)]))}const b=i(e,[["render",p]]);export{E as __pageData,b as default};
