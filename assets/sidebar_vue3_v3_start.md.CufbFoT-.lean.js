import{_ as l,c as a,a2 as t,o}from"./chunks/framework.D3LXhGAZ.js";const h=JSON.parse('{"title":"VUE3 前置","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/vue3/v3/start.md","filePath":"sidebar/vue3/v3/start.md"}'),i={name:"sidebar/vue3/v3/start.md"};function c(u,e,r,d,s,n){return o(),a("div",null,e[0]||(e[0]=[t('<h1 id="vue3-前置" tabindex="-1">VUE3 前置 <a class="header-anchor" href="#vue3-前置" aria-label="Permalink to &quot;VUE3 前置&quot;">​</a></h1><h2 id="vscode-插件" tabindex="-1">VSCode 插件 <a class="header-anchor" href="#vscode-插件" aria-label="Permalink to &quot;VSCode 插件&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>Vue-Official</li><li>Auto import</li><li>jsontots</li></ul></div><p> </p><h2 id="vue3-的ui组件库" tabindex="-1">vue3 的UI组件库 <a class="header-anchor" href="#vue3-的ui组件库" aria-label="Permalink to &quot;vue3 的UI组件库&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>element-plus （PC端）</li><li>vant （移动端）</li><li>ant-design-vue （PC组件库 ）</li></ul></div><p> </p><h2 id="vue3-生命周期" tabindex="-1">vue3 生命周期 <a class="header-anchor" href="#vue3-生命周期" aria-label="Permalink to &quot;vue3 生命周期&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-创建阶段" tabindex="-1">1. 创建阶段： <a class="header-anchor" href="#_1-创建阶段" aria-label="Permalink to &quot;1. 创建阶段：&quot;">​</a></h4><blockquote><ul><li><code>setup</code>：</li></ul><blockquote><ol><li>setup取代了beforeCreate和created；</li><li>相当于beforeCreate和created；</li><li>这个生命周期中不能使用 this</li></ol></blockquote></blockquote><p> </p><h4 id="_2-挂载阶段" tabindex="-1">2. 挂载阶段： <a class="header-anchor" href="#_2-挂载阶段" aria-label="Permalink to &quot;2. 挂载阶段：&quot;">​</a></h4><blockquote><ul><li><code>onBeforeMount</code>：在挂载前被调用</li><li><code>onMounted</code>：挂载完成后调用</li></ul></blockquote><p> </p><h4 id="_3-更新阶段" tabindex="-1">3. 更新阶段： <a class="header-anchor" href="#_3-更新阶段" aria-label="Permalink to &quot;3. 更新阶段：&quot;">​</a></h4><blockquote><ul><li><code>onBeforeUpdate</code>：数据更新时调用，此时内存中的数据已经被修改，但还没有更新到页面上</li><li><code>onUpdated</code>：数据更新后调用，此时内存数据已经修改，页面数据也已经更新</li></ul></blockquote><p> </p><h4 id="_4-卸载阶段" tabindex="-1">4. 卸载阶段： <a class="header-anchor" href="#_4-卸载阶段" aria-label="Permalink to &quot;4. 卸载阶段：&quot;">​</a></h4><blockquote><ul><li><code>onBeforeUnmount</code>：组件卸载前调用</li><li><code>onUnmounted</code>：卸载组件实例后调用</li></ul></blockquote><p> </p><ul><li>其他：</li></ul><blockquote><ul><li><code>onActivated</code>：与keep-alive一起使用，当keep-alive包裹的组件激活时调用</li><li><code>onDeactivated</code>：与keep-alive一起使用，当keep-alive包裹的组件停用时调用</li></ul></blockquote></div><p> </p><h2 id="vue3与vue2的主要区别" tabindex="-1">VUE3与VUE2的主要区别 <a class="header-anchor" href="#vue3与vue2的主要区别" aria-label="Permalink to &quot;VUE3与VUE2的主要区别&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ul><li>VUE3数据响应式原理重新实现，使用了ES6 proxy替代了 ES5 的Object.defineproperty，proxy可以直接对整个对象进行劫持，从而大大优化了响应式监听的性能</li><li>VUE3使用的是组合式API，可以更好的逻辑复用和代码组织</li><li>源码用 typescript 重写, 有更好的类型推导 (类型检测更为严格, 更稳定)</li><li>模板<code>&lt;template&gt;&lt;/template&gt;</code>可以有多个根元素</li><li>虚拟DOM - 新算法 (更快、更小)</li></ul></div>',12)]))}const b=l(i,[["render",c]]);export{h as __pageData,b as default};
