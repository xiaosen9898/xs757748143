import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"NODE 模块化","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/node/node/modules.md","filePath":"sidebar/node/node/modules.md"}'),e={name:"sidebar/node/node/modules.md"};function p(t,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="node-模块化" tabindex="-1">NODE 模块化 <a class="header-anchor" href="#node-模块化" aria-label="Permalink to &quot;NODE 模块化&quot;">​</a></h1><h2 id="模块作用域" tabindex="-1">模块作用域 <a class="header-anchor" href="#模块作用域" aria-label="Permalink to &quot;模块作用域&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>每个文件就是一个模块，每个模块中的成员是私有的，只有向外暴露时，其他模块才能使用</p></div><p> </p><h2 id="三大模块" tabindex="-1">三大模块 <a class="header-anchor" href="#三大模块" aria-label="Permalink to &quot;三大模块&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-核心模块" tabindex="-1">1. 核心模块 <a class="header-anchor" href="#_1-核心模块" aria-label="Permalink to &quot;1. 核心模块&quot;">​</a></h4><blockquote><ol><li>node自带的模块，安装引入即可使用；</li><li>导入模块：<code>const 变量名 = require(&#39;核心模块名&#39;)</code></li></ol></blockquote><h4 id="_2-自定义模块" tabindex="-1">2. 自定义模块 <a class="header-anchor" href="#_2-自定义模块" aria-label="Permalink to &quot;2. 自定义模块&quot;">​</a></h4><blockquote><ol><li>自定义模块导入：<code>const 变量名 = require(&#39;文件路径&#39;)</code></li></ol><blockquote><ol><li>不能与核心模块同名；</li><li>.js 后缀可以省略</li></ol></blockquote><ol start="2"><li>自定义模块导出：通过module.exports关键字按需导出</li></ol></blockquote><h4 id="_3-第三方模块" tabindex="-1">3. 第三方模块 <a class="header-anchor" href="#_3-第三方模块" aria-label="Permalink to &quot;3. 第三方模块&quot;">​</a></h4><blockquote><ol><li>定义：其他人写的模块</li><li>导入模块：<code>const 变量名 = require(&#39;核心模块名&#39;)</code></li></ol></blockquote></div><p> </p><h2 id="导入与导出" tabindex="-1">导入与导出 <a class="header-anchor" href="#导入与导出" aria-label="Permalink to &quot;导入与导出&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="_1-暴露成员对象" tabindex="-1">1. 暴露成员对象 <a class="header-anchor" href="#_1-暴露成员对象" aria-label="Permalink to &quot;1. 暴露成员对象&quot;">​</a></h4><blockquote><ul><li>module对象中的exports对象可以向外暴露自身模块的成员</li></ul></blockquote><p> </p><h4 id="_2-导出方式" tabindex="-1">2. 导出方式 <a class="header-anchor" href="#_2-导出方式" aria-label="Permalink to &quot;2. 导出方式&quot;">​</a></h4><blockquote><h6 id="_1-exports" tabindex="-1">1. <code>exports</code> <a class="header-anchor" href="#_1-exports" aria-label="Permalink to &quot;1. \`exports\`&quot;">​</a></h6><ol><li>使用 exports 导出：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myModule.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Goodbye!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;My Module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>在其他模块中使用时：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.name);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：My Module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Hello!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用解构 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：My Module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Goodbye!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></blockquote><p> </p><blockquote><h6 id="_2-module-exports" tabindex="-1">2. <code>module.exports</code> <a class="header-anchor" href="#_2-module-exports" aria-label="Permalink to &quot;2. \`module.exports\`&quot;">​</a></h6><ol><li>使用 module.exports 导出：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myModule.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My Module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Goodbye!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>在其他模块中使用时：</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.name);            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：My Module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Goodbye!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用解构 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：My Module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayGoodbye</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Goodbye!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>注意</li></ul><blockquote><ol><li>使用exports时，类似添加属性，所以模块导出的内容仍然是 module.exports；</li><li>module.exports 被重新赋值时，exports 将失效，因为模块导出的内容是 module.exports；</li><li>不要混用 exports 和 module.exports</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误示例</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Module Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This will override exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在这种情况下，最终导出的只有 module.exports 中的函数，而 exports.name 将被忽略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote></blockquote><p> </p><h4 id="_3-导入模块的基本流程" tabindex="-1">3. 导入模块的基本流程 <a class="header-anchor" href="#_3-导入模块的基本流程" aria-label="Permalink to &quot;3. 导入模块的基本流程&quot;">​</a></h4><blockquote><ol><li>将相对路径转为绝对路径，定位目标文件；</li><li>缓存检测；</li><li>读取目标文件代码；</li><li>包裹为一个函数并自执行（通过argumentscallee.toString()查看自执行函数）；</li><li>缓存模块的值；</li><li>返回module.exports的值</li></ol></blockquote><p> </p><h4 id="_4-导入注意点" tabindex="-1">4. 导入注意点 <a class="header-anchor" href="#_4-导入注意点" aria-label="Permalink to &quot;4. 导入注意点&quot;">​</a></h4><blockquote><ol><li>导入其他类型文件时，会以js文件进行处理；</li><li>如果导入的路径是个文件夹：</li></ol><blockquote><ol><li>首先会去找该文件夹下的package.json文件中main属性对应的文件，如果存在则导入，否则报错</li><li>如果package.json文件不存在，或者main属性不存在，则会尝试导入该文件夹下的index.js和index.json，如果没有找到则报错</li></ol></blockquote></blockquote></div><p> </p><h2 id="commonjs规范" tabindex="-1">CommonJs规范 <a class="header-anchor" href="#commonjs规范" aria-label="Permalink to &quot;CommonJs规范&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>概念：模块化的标准，服务器端的模块化规范</li><li>规定：</li></ol><blockquote><ol><li>每个模块内部，module变量代表当前模块；</li><li>module变量是一个对象，它的exports属性是对外的接口；</li><li>加载某个模块，就是加载该模块的module.exports属性</li></ol></blockquote><ol start="3"><li>node中this指向：指向当前模块，也是exports对象</li></ol></div>`,12)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
