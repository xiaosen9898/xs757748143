import{_ as s,c as a,a2 as l,o as e}from"./chunks/framework.D3LXhGAZ.js";const c=JSON.parse('{"title":"Dart 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"dart/dart/dataType.md","filePath":"dart/dart/dataType.md"}'),t={name:"dart/dart/dataType.md"};function n(p,i,d,h,r,o){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="dart-数据类型" tabindex="-1">Dart 数据类型 <a class="header-anchor" href="#dart-数据类型" aria-label="Permalink to &quot;Dart 数据类型&quot;">​</a></h1><h2 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><code>int</code>：整型</li><li><code>double</code>：浮点型</li><li><code>bool</code>：布尔型</li><li><code>String</code>：字符串</li></ol></div><p> </p><h2 id="list-类型" tabindex="-1">List 类型 <a class="header-anchor" href="#list-类型" aria-label="Permalink to &quot;List 类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>类型推导定义：<code>var letters = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];</code></p></li><li><p>明确指定类型：<code>List&lt;int&gt; numbers = [1, 2, 3, 4];</code></p></li><li><p>方法：</p></li></ol><blockquote><ul><li><code>.length</code>：获取集合的长度</li><li><code>.add()</code>：添加</li><li><code>.remove()</code>：删除</li><li><code>.contains()</code>：包含</li></ul></blockquote></div><p> </p><h2 id="set-类型" tabindex="-1">Set 类型 <a class="header-anchor" href="#set-类型" aria-label="Permalink to &quot;Set 类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>Set对比List就是括号变成 { } 了</p></li><li><p>Set是无序的，并且元素是不重复的</p></li></ol></div><p> </p><h2 id="map-类型" tabindex="-1">Map 类型 <a class="header-anchor" href="#map-类型" aria-label="Permalink to &quot;Map 类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>类型推导定义：<code>var person= {&#39;name&#39;: &#39;Jack&#39;, &#39;age&#39;: 18};</code></p></li><li><p>明确指定类型：<code>Map&lt;String, Object&gt; person2 = {&#39;height&#39;: 1.88, &#39;address&#39;: &#39;北京市&#39;};</code></p></li><li><p>访问属性：<code>person[&quot;属性名&quot;]</code></p></li><li><p>方法：</p></li></ol><blockquote><ul><li><code>.length</code>：获取集合的长度</li><li><code>.keys</code>：获取所有的keys</li><li><code>.values</code>：获取所有的values</li><li><code>.containsKey(&#39;key&#39;)</code>：判断是否包含某个key</li><li><code>.containsValue()</code>：判断是否包含某个value</li><li><code>.remove(&#39;key&#39;)</code>：根据key删除元素</li></ul></blockquote></div><p> </p><h2 id="可空类型" tabindex="-1">可空类型 <a class="header-anchor" href="#可空类型" aria-label="Permalink to &quot;可空类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>加上 ? 表示该变量可以为 null</li></ol><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以为 null</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以为 null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>不加 ?，则不允许变量赋值为 null</li></ol><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，不允许赋值为 null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><p> </p><h2 id="判断数据类型" tabindex="-1">判断数据类型 <a class="header-anchor" href="#判断数据类型" aria-label="Permalink to &quot;判断数据类型&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p><code>runtimeType</code>：print(变量.runtimeType);</p></li><li><p><code>is</code>：变量 is 某种类型</p></li></ol></div><p> </p><h2 id="数据类型之间的转换" tabindex="-1">数据类型之间的转换 <a class="header-anchor" href="#数据类型之间的转换" aria-label="Permalink to &quot;数据类型之间的转换&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>字符串数字转数字：</li></ol><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 123</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;10.8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   10.8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>数字转字符串：</li></ol><div class="language-dart vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStringAsFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保留两位小数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div>`,21)]))}const u=s(t,[["render",n]]);export{c as __pageData,u as default};
