import{_ as e,c as t,a2 as i,o}from"./chunks/framework.D3LXhGAZ.js";const m=JSON.parse('{"title":"Restful API","description":"","frontmatter":{},"headers":[],"relativePath":"network/net/restful.md","filePath":"network/net/restful.md"}'),a={name:"network/net/restful.md"};function r(s,l,p,u,c,n){return o(),t("div",null,l[0]||(l[0]=[i('<h1 id="restful-api" tabindex="-1">Restful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;Restful API&quot;">​</a></h1><h2 id="restful-api-1" tabindex="-1">Restful API <a class="header-anchor" href="#restful-api-1" aria-label="Permalink to &quot;Restful API&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>概念：Restful API 是一种互联网的软件架构风格，基于 HTTP 协议，使用 URL、HTTP 方法和 JSON 数据进行交互</p></li><li><p>API：应用程序接口（Application Programming Interface）</p></li></ol></div><p> </p><h2 id="restful-api-具体设计规范" tabindex="-1">Restful API 具体设计规范 <a class="header-anchor" href="#restful-api-具体设计规范" aria-label="Permalink to &quot;Restful API 具体设计规范&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>协议：HTTPS</p></li><li><p>域名：<a href="https://www.example.com" target="_blank" rel="noreferrer">https://www.example.com</a> → <a href="https://www.example.com/api" target="_blank" rel="noreferrer">https://www.example.com/api</a></p></li><li><p>版本：<a href="https://www.example.com/api/v1" target="_blank" rel="noreferrer">https://www.example.com/api/v1</a></p></li></ol><blockquote><ul><li>v1 表示版本</li></ul></blockquote><ol start="4"><li>路径：<a href="https://www.example.com/api/v1/users" target="_blank" rel="noreferrer">https://www.example.com/api/v1/users</a></li></ol><blockquote><ul><li>users 表示数据库表 users</li></ul></blockquote><ol start="5"><li>方法：</li></ol><blockquote><ul><li>GET：获取资源</li><li>POST：添加资源</li><li>PUT：更新资源</li><li>PATCH：部分更新资源</li><li>DELETE：删除资源</li></ul></blockquote><ol start="6"><li>数据过滤：</li></ol><blockquote><ol><li>?limit=10 指定返回数据的数量</li><li>?offset=10 指定一个偏移量</li><li>?page=2&amp;_page=10 指定第几页和每页的数量</li><li>?sortby=xxx&amp;order=xxx 指定返回数据的排序规则</li></ol></blockquote><ol start="7"><li><p>状态码</p></li><li><p>返回结果：</p></li></ol><blockquote><ol><li>GET 资源对象列表（数组）；如果获取一条数据，则返回一个对象</li><li>POST 返回添加后的资源对象，以及有可能会加上是否成功</li><li>PUT 返回修改后的资源对象，以及有可能会加上是否成功</li><li>PATCH 返回更新后的资源对象，以及有可能会加上是否成功</li><li>DELETE 返回空，以及有可能会加上是否成功</li></ol></blockquote><ol start="9"><li>返回的数据格式：</li></ol><blockquote><ul><li>尽量使用 JSON 格式，避免使用 XML</li></ul></blockquote><p> </p><p>总结：</p><blockquote><ol><li>看 URL 就知道要什么；</li><li>看 method 就知道干什么；</li><li>看 stutus code 就知道结果如何</li></ol></blockquote></div>',6)]))}const h=e(a,[["render",r]]);export{m as __pageData,h as default};
