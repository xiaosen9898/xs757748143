import{_ as o,c as e,a2 as t,o as i}from"./chunks/framework.D3LXhGAZ.js";const p=JSON.parse('{"title":"Web Api 基础","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/webApi/webapi/webapiBase.md","filePath":"sidebar/webApi/webapi/webapiBase.md"}'),c={name:"sidebar/webApi/webapi/webapiBase.md"};function a(u,l,s,d,b,r){return i(),e("div",null,l[0]||(l[0]=[t('<h1 id="web-api-基础" tabindex="-1">Web Api 基础 <a class="header-anchor" href="#web-api-基础" aria-label="Permalink to &quot;Web Api 基础&quot;">​</a></h1><h2 id="web-api-定义" tabindex="-1">Web Api 定义 <a class="header-anchor" href="#web-api-定义" aria-label="Permalink to &quot;Web Api 定义&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>作用：用js去操作HTML和浏览器</p></li><li><p>分类：</p></li></ol><blockquote><ol><li>DOM（文档对象模型）：</li></ol><blockquote><ol><li>作用：开发网页内容特效和实现用户交互；</li><li>核心思想：把网页内容当做对象来处理；</li><li>DOM对象：</li></ol><blockquote><ol><li>每个标签元素是一个js对象；</li><li>所有的标签属性都可以在这个对象找到；</li><li>修改这个对象的属性会自动映射到标签上</li></ol></blockquote></blockquote><ol start="2"><li>BOM（浏览器对象模型）</li></ol></blockquote></div><p> </p><h2 id="获取元素" tabindex="-1">获取元素 <a class="header-anchor" href="#获取元素" aria-label="Permalink to &quot;获取元素&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><code>document.querySelector(&#39;css选择器&#39;)</code></li></ol><blockquote><ul><li>获取到第一个选中选择器的元素（如果获取不到返回null）</li></ul></blockquote><ol start="2"><li><code>document.querySelectorAll(css选择器)</code></li></ol><blockquote><ul><li>获取到所有选中选择器的元素（存放在一个伪数组里，获取不到返回一个length为0的伪数组）</li></ul></blockquote><ol start="3"><li><code>getElementById(&#39;id选择器&#39;)</code></li></ol><blockquote><ul><li>获取到第一个选中选择器的元素（如果获取不到返回null）</li></ul></blockquote><ol start="4"><li><code>getElementsByClassName(&#39;类选择器&#39;)</code></li></ol><blockquote><ul><li>获取到第一个选中选择器的元素（如果获取不到返回null）</li></ul></blockquote><ol start="5"><li><code>getElementsByName(&#39;指定名称&#39;)</code></li></ol><blockquote><ul><li>获取到第一个选中选择器的元素（如果获取不到返回null）</li></ul></blockquote></div><p> </p><h2 id="修改元素内容" tabindex="-1">修改元素内容 <a class="header-anchor" href="#修改元素内容" aria-label="Permalink to &quot;修改元素内容&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><code>元素.innerText = &#39;&#39;</code></li></ol><blockquote><ul><li>对元素的文本进行修改，不会识别标签</li></ul></blockquote><ol start="2"><li><code>元素.innerHTML = &#39;&#39;</code></li></ol><blockquote><ul><li>对元素的文本进行修改，会识别标签</li></ul></blockquote><ol start="3"><li><code>documennt,write()</code></li></ol><blockquote><ul><li>会解析标签，只能将文本内容写在<code>&lt;/body&gt;</code>之前</li></ul></blockquote></div><p> </p><h2 id="操作元素属性" tabindex="-1">操作元素属性 <a class="header-anchor" href="#操作元素属性" aria-label="Permalink to &quot;操作元素属性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>基本语法：<code>元素.属性名 = &#39;值&#39;</code></p></li><li><p>操作元素的类：</p></li></ol><blockquote><ol><li>获取类：<code>元素.classList</code></li></ol></blockquote><blockquote><ol start="2"><li>追加类：<code>元素.className += &#39;two&#39;</code> or <code>元素.className = &#39;one two&#39;</code></li></ol><blockquote><ul><li>会覆盖原来的类</li><li>追加类的时候类名之间不要忘记空格</li></ul></blockquote></blockquote><blockquote><ol start="3"><li>添加类：<code>元素.classList.add(&#39;类名1&#39;,&#39;类名2&#39;,...)</code></li></ol></blockquote><blockquote><ol start="4"><li>移除类：<code>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</code></li></ol></blockquote><blockquote><ol start="5"><li>切换类：<code>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</code></li></ol><blockquote><ul><li>如果元素有这个类,那就移除这个类; 如果元素没有这个类,那就添加这个类</li></ul></blockquote></blockquote><blockquote><ol start="6"><li>判断类：<code>元素.classList.remove(&#39;类名1&#39;,&#39;类名2&#39;,...)</code></li></ol><blockquote><ul><li>判断这个元素是否拥有某个类, 如果拥有就返回true,没有就返回false</li></ul></blockquote></blockquote><ol start="3"><li>操作表单元素的值：</li></ol><blockquote><ol><li>获取：<code>元素.value</code></li><li>设置：<code>元素.value = &#39;新值&#39;</code></li></ol></blockquote><ol start="4"><li>操作布尔型的属性：</li></ol><blockquote><ol><li>获取：<code>元素.布尔型属性名</code>，如：input.disabled</li><li>设置：<code>元素.布尔型属性名 = true/false</code></li></ol></blockquote><ol start="5"><li>操作元素样式属性：</li></ol><blockquote><ol><li>获取：<code>元素.style.样式属性名</code></li><li>设置：<code>元素.style.样式属性名 = &#39;值&#39;</code></li></ol></blockquote></div><p> </p><h2 id="自定义属性" tabindex="-1">自定义属性 <a class="header-anchor" href="#自定义属性" aria-label="Permalink to &quot;自定义属性&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>第一种：<code>data-属性名</code></li></ol><blockquote><ol><li>作用：</li></ol><blockquote><ol><li>用来设置元素的自定义属性；</li><li>dataset可以获取当前元素中所有以data-开头的自定义属性，返回一个对象</li></ol></blockquote><ol start="2"><li>例如：</li></ol><blockquote><ul><li>e.target.dataset.id 获取到当前点击元素的自定义属性data-id的属性值</li></ul></blockquote></blockquote><p> </p><ol><li>第二种：<code>attribute</code></li></ol><blockquote><ol><li>作用：</li></ol><blockquote><ul><li>用来操作元素自定义属性的（点语法操作自定义属性结果为undefined）</li></ul></blockquote><ol start="2"><li>使用：</li></ol><blockquote><ol><li>获取属性值：<code>元素.getAttribute(&#39;属性名&#39;)</code></li><li>添加/修改属性：<code>元素.setAttribute(&#39;属性名&#39;, &#39;属性值&#39;)</code></li><li>移除属性：<code>元素.removeAttribute(‘属性名’)</code></li></ol></blockquote></blockquote></div>',15)]))}const q=o(c,[["render",a]]);export{p as __pageData,q as default};
