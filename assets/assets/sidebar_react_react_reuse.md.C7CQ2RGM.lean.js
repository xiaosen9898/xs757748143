import{_ as o,c as l,a2 as a,o as t}from"./chunks/framework.D3LXhGAZ.js";const h=JSON.parse('{"title":"复用","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/react/react/reuse.md","filePath":"sidebar/react/react/reuse.md"}'),r={name:"sidebar/react/react/reuse.md"};function i(s,e,c,p,d,n){return t(),l("div",null,e[0]||(e[0]=[a('<h1 id="复用" tabindex="-1">复用 <a class="header-anchor" href="#复用" aria-label="Permalink to &quot;复用&quot;">​</a></h1><h2 id="render-props" tabindex="-1">Render Props <a class="header-anchor" href="#render-props" aria-label="Permalink to &quot;Render Props&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>本质：父传子函数</p></li><li><p>缺点：</p></li></ol><blockquote><ol><li>增加组件嵌套结构</li><li>增加理解成本</li></ol></blockquote><ol start="3"><li>步骤：</li></ol><blockquote><ol><li>render属性是一个函数， render负责返回JSX</li><li>组件内部封装属性和方法，传给render函数的参数</li></ol></blockquote></div><p> </p><h2 id="hoc" tabindex="-1">HOC <a class="header-anchor" href="#hoc" aria-label="Permalink to &quot;HOC&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li><p>本质：是一个函数，接收一个组件，返回一个封装后的组件</p></li><li><p>缺点：增加组件嵌套结构</p></li></ol></div><p> </p><h2 id="自定义hooks" tabindex="-1">自定义hooks <a class="header-anchor" href="#自定义hooks" aria-label="Permalink to &quot;自定义hooks&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><blockquote><ol><li>语法：<code>function useXxxx(){}</code></li><li>特点：自定义hooks内，可以调用其它hooks</li></ol></blockquote></div>',9)]))}const b=o(r,[["render",i]]);export{h as __pageData,b as default};
