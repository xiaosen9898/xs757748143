import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.D3LXhGAZ.js";const d=JSON.parse('{"title":"箭头函数","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/javaScript/js/arrowFn.md","filePath":"sidebar/javaScript/js/arrowFn.md"}'),t={name:"sidebar/javaScript/js/arrowFn.md"};function e(p,s,h,r,k,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h1><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>语法：<code>const testFn = ( 参数 ) =&gt; { 函数体}</code></li></ol><blockquote><ol><li>箭头函数是匿名函数，不能单独存在；</li><li>箭头函数一般用作参数传递（要么做为函数表达式，要么做为回调函数，要么做为自调用函数）</li></ol></blockquote><p> </p><ol start="2"><li>说明：</li></ol><blockquote><ol><li>箭头函数是匿名函数，不能单独存在；</li><li>箭头函数一般用作参数传递（要么做为函数表达式，要么做为回调函数，要么做为自调用函数）</li></ol></blockquote></div><p> </p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>箭头函数本身没有this,function函数才会有this；</li><li>不能使用arguments对象，该对象在函数体内不存在；</li><li>箭头函数的this指向 → 箭头函数所在环境的外层函数的this指向</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.num)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//箭头函数的this指向就是add函数的this指向</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><p> </p><h2 id="几个小细节" tabindex="-1">几个小细节 <a class="header-anchor" href="#几个小细节" aria-label="Permalink to &quot;几个小细节&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>参数部分：</li></ol><blockquote><ul><li>如果只有一个参数，可以省略()，如果没有参数或者多个，( )不能省略</li></ul></blockquote><ol start="2"><li>函数体部分：</li></ol><blockquote><ol><li>如果函数体只有一句 ：</li></ol><blockquote><ol><li>不写大括号{}，默认会返回函数体的结果，且不能写return；</li><li>写了大括号，不会返回函数体的结果，需要写return才能返回结果</li></ol></blockquote><ol start="2"><li>如果函数体不止一句，那么不可以省略{ }，且需要使用return返回数据</li><li>如果返回的是一个对象，对象用小括号括起来，表示返回的是对象</li></ol><ul><li>记忆：写了大括号就需要return才能拿到数据</li></ul></blockquote><ul><li>注意：</li></ul><blockquote><ol><li>在事件处理函数的时候，尽可能不要使用箭头函数</li><li>在对象的方法中，尽可能不要使用箭头函数！</li></ol></blockquote></div>`,9)]))}const u=i(t,[["render",e]]);export{d as __pageData,u as default};
