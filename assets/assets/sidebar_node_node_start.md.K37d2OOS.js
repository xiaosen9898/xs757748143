import{_ as s,c as a,a2 as l,o as t}from"./chunks/framework.D3LXhGAZ.js";const e="/xs757748143/imgs/node/program.png",E=JSON.parse('{"title":"NODE 前置","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/node/node/start.md","filePath":"sidebar/node/node/start.md"}'),n={name:"sidebar/node/node/start.md"};function h(r,i,p,o,k,d){return t(),a("div",null,i[0]||(i[0]=[l(`<h1 id="node-前置" tabindex="-1">NODE 前置 <a class="header-anchor" href="#node-前置" aria-label="Permalink to &quot;NODE 前置&quot;">​</a></h1><h2 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;Buffer&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>创建：</li></ol><blockquote><ol><li>Buffer.alloc(长度)；</li><li>Buffer.allocUnsafe(长度)：会使用之前的内存</li><li>Buffer.from()(长度)：传入字符串或者二进制Buffer数组</li></ol></blockquote><p> </p><ol start="2"><li>Buffer操作：</li></ol><blockquote><ol><li>将Buffer转为字符串</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">105</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">108</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">118</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">121</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">117</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>将Buffer转为二进制：toString(2)</li><li>可以通过数组操作的方式去操作Buffer元素</li></ol></blockquote><p> </p><ol start="3"><li>补充：</li></ol><blockquote><ol><li>溢出</li><li>utf8的中文一个中文占3个字符</li></ol></blockquote></div><p> </p><h2 id="程序运行流程" tabindex="-1">程序运行流程 <a class="header-anchor" href="#程序运行流程" aria-label="Permalink to &quot;程序运行流程&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p><img src="`+e+'" alt="程序运行流程图" data-fancybox=""></p></div><p> </p><h2 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><ol><li>进程：可以理解为程序执行的过程</li><li>线程：是进程的中的执行流</li></ol><blockquote><ul><li>假设餐厅为一个应用程序，那么开店就是一个进程开始，餐厅的厨师、服务员等就是一个个的线程</li></ul></blockquote></div>',9)]))}const u=s(n,[["render",h]]);export{E as __pageData,u as default};
